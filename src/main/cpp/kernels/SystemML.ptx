//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	slice_sparse_dense
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
;
.extern .shared .align 8 .b8 sdata[];
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .entry slice_sparse_dense(
	.param .u64 slice_sparse_dense_param_0,
	.param .u64 slice_sparse_dense_param_1,
	.param .u64 slice_sparse_dense_param_2,
	.param .u64 slice_sparse_dense_param_3,
	.param .u32 slice_sparse_dense_param_4,
	.param .u32 slice_sparse_dense_param_5,
	.param .u32 slice_sparse_dense_param_6,
	.param .u32 slice_sparse_dense_param_7,
	.param .u32 slice_sparse_dense_param_8
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<24>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd9, [slice_sparse_dense_param_0];
	ld.param.u64 	%rd10, [slice_sparse_dense_param_1];
	ld.param.u64 	%rd11, [slice_sparse_dense_param_2];
	ld.param.u64 	%rd12, [slice_sparse_dense_param_3];
	ld.param.u32 	%r15, [slice_sparse_dense_param_4];
	ld.param.u32 	%r16, [slice_sparse_dense_param_5];
	ld.param.u32 	%r12, [slice_sparse_dense_param_6];
	ld.param.u32 	%r13, [slice_sparse_dense_param_7];
	ld.param.u32 	%r14, [slice_sparse_dense_param_8];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r1, %r17, %r18, %r19;
	add.s32 	%r2, %r1, %r15;
	setp.gt.s32	%p1, %r2, %r16;
	@%p1 bra 	BB0_6;

	cvta.to.global.u64 	%rd13, %rd10;
	mul.wide.s32 	%rd14, %r2, 4;
	add.s64 	%rd1, %rd13, %rd14;
	ld.global.u32 	%r23, [%rd1];
	ld.global.u32 	%r22, [%rd1+4];
	setp.ge.s32	%p2, %r23, %r22;
	@%p2 bra 	BB0_6;

	cvta.to.global.u64 	%rd2, %rd12;
	cvta.to.global.u64 	%rd15, %rd9;
	cvta.to.global.u64 	%rd16, %rd11;
	mul.lo.s32 	%r20, %r1, %r14;
	sub.s32 	%r5, %r20, %r12;
	mul.wide.s32 	%rd17, %r23, 8;
	add.s64 	%rd22, %rd15, %rd17;
	mul.wide.s32 	%rd18, %r23, 4;
	add.s64 	%rd21, %rd16, %rd18;

BB0_3:
	ld.global.u32 	%r8, [%rd21];
	setp.lt.s32	%p3, %r8, %r12;
	setp.gt.s32	%p4, %r8, %r13;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_5;

	ld.global.f64 	%fd1, [%rd22];
	add.s32 	%r21, %r5, %r8;
	mul.wide.s32 	%rd19, %r21, 8;
	add.s64 	%rd20, %rd2, %rd19;
	st.global.f64 	[%rd20], %fd1;
	ld.global.u32 	%r22, [%rd1+4];

BB0_5:
	add.s64 	%rd22, %rd22, 8;
	add.s64 	%rd21, %rd21, 4;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p6, %r23, %r22;
	@%p6 bra 	BB0_3;

BB0_6:
	ret;
}

	// .globl	slice_dense_dense
.visible .entry slice_dense_dense(
	.param .u64 slice_dense_dense_param_0,
	.param .u64 slice_dense_dense_param_1,
	.param .u32 slice_dense_dense_param_2,
	.param .u32 slice_dense_dense_param_3,
	.param .u32 slice_dense_dense_param_4,
	.param .u32 slice_dense_dense_param_5,
	.param .u32 slice_dense_dense_param_6,
	.param .u32 slice_dense_dense_param_7
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd7, [slice_dense_dense_param_0];
	ld.param.u64 	%rd8, [slice_dense_dense_param_1];
	ld.param.u32 	%r9, [slice_dense_dense_param_2];
	ld.param.u32 	%r13, [slice_dense_dense_param_3];
	ld.param.u32 	%r10, [slice_dense_dense_param_4];
	ld.param.u32 	%r11, [slice_dense_dense_param_6];
	ld.param.u32 	%r12, [slice_dense_dense_param_7];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	add.s32 	%r14, %r4, %r9;
	setp.gt.s32	%p1, %r14, %r13;
	@%p1 bra 	BB1_4;

	mul.lo.s32 	%r21, %r4, %r12;
	setp.lt.s32	%p2, %r12, 1;
	@%p2 bra 	BB1_4;

	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd10, %rd7;
	add.s32 	%r6, %r21, %r12;
	mul.lo.s32 	%r15, %r1, %r2;
	add.s32 	%r16, %r3, %r15;
	mul.lo.s32 	%r17, %r12, %r16;
	mul.wide.s32 	%rd11, %r17, 8;
	add.s64 	%rd14, %rd9, %rd11;
	add.s32 	%r18, %r3, %r9;
	add.s32 	%r19, %r18, %r15;
	mad.lo.s32 	%r20, %r11, %r19, %r10;
	mul.wide.s32 	%rd12, %r20, 8;
	add.s64 	%rd13, %rd10, %rd12;

BB1_3:
	ld.global.f64 	%fd1, [%rd13];
	st.global.f64 	[%rd14], %fd1;
	add.s64 	%rd14, %rd14, 8;
	add.s64 	%rd13, %rd13, 8;
	add.s32 	%r21, %r21, 1;
	setp.lt.s32	%p3, %r21, %r6;
	@%p3 bra 	BB1_3;

BB1_4:
	ret;
}

	// .globl	copy_u2l_dense
.visible .entry copy_u2l_dense(
	.param .u64 copy_u2l_dense_param_0,
	.param .u32 copy_u2l_dense_param_1,
	.param .u32 copy_u2l_dense_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd1, [copy_u2l_dense_param_0];
	ld.param.u32 	%r3, [copy_u2l_dense_param_1];
	ld.param.u32 	%r4, [copy_u2l_dense_param_2];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r5, %r6, %r7;
	div.s32 	%r8, %r1, %r3;
	rem.s32 	%r9, %r1, %r3;
	mad.lo.s32 	%r2, %r9, %r3, %r8;
	setp.gt.s32	%p1, %r9, %r8;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB2_2;
	bra.uni 	BB2_1;

BB2_1:
	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f64 	%fd1, [%rd4];
	mul.wide.s32 	%rd5, %r2, 8;
	add.s64 	%rd6, %rd2, %rd5;
	st.global.f64 	[%rd6], %fd1;

BB2_2:
	ret;
}

	// .globl	relu
.visible .entry relu(
	.param .u64 relu_param_0,
	.param .u64 relu_param_1,
	.param .u32 relu_param_2,
	.param .u32 relu_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [relu_param_0];
	ld.param.u64 	%rd2, [relu_param_1];
	ld.param.u32 	%r4, [relu_param_2];
	ld.param.u32 	%r3, [relu_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	div.s32 	%r2, %r1, %r3;
	setp.lt.s32	%p1, %r2, %r4;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB3_2;
	bra.uni 	BB3_1;

BB3_1:
	rem.s32 	%r8, %r1, %r3;
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r9, %r2, %r3, %r8;
	mul.wide.s32 	%rd4, %r9, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	mov.f64 	%fd2, 0d0000000000000000;
	max.f64 	%fd3, %fd2, %fd1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd3;

BB3_2:
	ret;
}

	// .globl	relu_backward
.visible .entry relu_backward(
	.param .u64 relu_backward_param_0,
	.param .u64 relu_backward_param_1,
	.param .u64 relu_backward_param_2,
	.param .u32 relu_backward_param_3,
	.param .u32 relu_backward_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd2, [relu_backward_param_0];
	ld.param.u64 	%rd3, [relu_backward_param_1];
	ld.param.u64 	%rd4, [relu_backward_param_2];
	ld.param.u32 	%r4, [relu_backward_param_3];
	ld.param.u32 	%r3, [relu_backward_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r5, %r6, %r7;
	div.s32 	%r2, %r1, %r3;
	setp.lt.s32	%p1, %r2, %r4;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB4_4;
	bra.uni 	BB4_1;

BB4_1:
	rem.s32 	%r8, %r1, %r3;
	cvta.to.global.u64 	%rd5, %rd2;
	mad.lo.s32 	%r9, %r2, %r3, %r8;
	cvt.s64.s32	%rd1, %r9;
	mul.wide.s32 	%rd6, %r9, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f64 	%fd4, [%rd7];
	mov.f64 	%fd5, 0d0000000000000000;
	setp.leu.f64	%p4, %fd4, 0d0000000000000000;
	@%p4 bra 	BB4_3;

	cvta.to.global.u64 	%rd8, %rd3;
	shl.b64 	%rd9, %rd1, 3;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f64 	%fd5, [%rd10];

BB4_3:
	cvta.to.global.u64 	%rd11, %rd4;
	shl.b64 	%rd12, %rd1, 3;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f64 	[%rd13], %fd5;

BB4_4:
	ret;
}

	// .globl	inplace_add
.visible .entry inplace_add(
	.param .u64 inplace_add_param_0,
	.param .u64 inplace_add_param_1,
	.param .u32 inplace_add_param_2,
	.param .u32 inplace_add_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [inplace_add_param_0];
	ld.param.u64 	%rd2, [inplace_add_param_1];
	ld.param.u32 	%r4, [inplace_add_param_2];
	ld.param.u32 	%r3, [inplace_add_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	div.s32 	%r2, %r1, %r3;
	setp.lt.s32	%p1, %r2, %r4;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB5_2;
	bra.uni 	BB5_1;

BB5_1:
	rem.s32 	%r8, %r1, %r3;
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r9, %r2, %r3, %r8;
	mul.wide.s32 	%rd4, %r9, 8;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f64 	%fd1, [%rd7];
	ld.global.f64 	%fd2, [%rd5];
	add.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd7], %fd3;

BB5_2:
	ret;
}

	// .globl	bias_add
.visible .entry bias_add(
	.param .u64 bias_add_param_0,
	.param .u64 bias_add_param_1,
	.param .u64 bias_add_param_2,
	.param .u32 bias_add_param_3,
	.param .u32 bias_add_param_4,
	.param .u32 bias_add_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [bias_add_param_0];
	ld.param.u64 	%rd2, [bias_add_param_1];
	ld.param.u64 	%rd3, [bias_add_param_2];
	ld.param.u32 	%r5, [bias_add_param_3];
	ld.param.u32 	%r3, [bias_add_param_4];
	ld.param.u32 	%r4, [bias_add_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r7, %r6, %r8;
	div.s32 	%r2, %r1, %r3;
	setp.lt.s32	%p1, %r2, %r5;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB6_2;
	bra.uni 	BB6_1;

BB6_1:
	rem.s32 	%r9, %r1, %r3;
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r10, %r2, %r3, %r9;
	mul.wide.s32 	%rd5, %r10, 8;
	add.s64 	%rd6, %rd4, %rd5;
	div.s32 	%r11, %r9, %r4;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r11, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f64 	%fd1, [%rd9];
	ld.global.f64 	%fd2, [%rd6];
	add.f64 	%fd3, %fd2, %fd1;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd5;
	st.global.f64 	[%rd11], %fd3;

BB6_2:
	ret;
}

	// .globl	daxpy_matrix_vector
.visible .entry daxpy_matrix_vector(
	.param .u64 daxpy_matrix_vector_param_0,
	.param .u64 daxpy_matrix_vector_param_1,
	.param .f64 daxpy_matrix_vector_param_2,
	.param .u64 daxpy_matrix_vector_param_3,
	.param .u32 daxpy_matrix_vector_param_4,
	.param .u32 daxpy_matrix_vector_param_5,
	.param .u32 daxpy_matrix_vector_param_6,
	.param .u32 daxpy_matrix_vector_param_7
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd3, [daxpy_matrix_vector_param_0];
	ld.param.u64 	%rd5, [daxpy_matrix_vector_param_1];
	ld.param.f64 	%fd2, [daxpy_matrix_vector_param_2];
	ld.param.u64 	%rd4, [daxpy_matrix_vector_param_3];
	ld.param.u32 	%r5, [daxpy_matrix_vector_param_4];
	ld.param.u32 	%r3, [daxpy_matrix_vector_param_5];
	ld.param.u32 	%r4, [daxpy_matrix_vector_param_6];
	cvta.to.global.u64 	%rd1, %rd5;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	div.s32 	%r1, %r9, %r3;
	rem.s32 	%r2, %r9, %r3;
	setp.lt.s32	%p1, %r1, %r5;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_4;
	bra.uni 	BB7_1;

BB7_1:
	cvta.to.global.u64 	%rd6, %rd4;
	mad.lo.s32 	%r10, %r1, %r3, %r2;
	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r10, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f64 	%fd1, [%rd9];
	add.s64 	%rd2, %rd6, %rd8;
	setp.eq.s32	%p4, %r4, 1;
	@%p4 bra 	BB7_3;
	bra.uni 	BB7_2;

BB7_3:
	mul.wide.s32 	%rd12, %r2, 8;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.f64 	%fd5, [%rd13];
	fma.rn.f64 	%fd6, %fd5, %fd2, %fd1;
	st.global.f64 	[%rd2], %fd6;
	bra.uni 	BB7_4;

BB7_2:
	mul.wide.s32 	%rd10, %r1, 8;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.f64 	%fd3, [%rd11];
	fma.rn.f64 	%fd4, %fd3, %fd2, %fd1;
	st.global.f64 	[%rd2], %fd4;

BB7_4:
	ret;
}

	// .globl	bias_multiply
.visible .entry bias_multiply(
	.param .u64 bias_multiply_param_0,
	.param .u64 bias_multiply_param_1,
	.param .u64 bias_multiply_param_2,
	.param .u32 bias_multiply_param_3,
	.param .u32 bias_multiply_param_4,
	.param .u32 bias_multiply_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [bias_multiply_param_0];
	ld.param.u64 	%rd2, [bias_multiply_param_1];
	ld.param.u64 	%rd3, [bias_multiply_param_2];
	ld.param.u32 	%r5, [bias_multiply_param_3];
	ld.param.u32 	%r3, [bias_multiply_param_4];
	ld.param.u32 	%r4, [bias_multiply_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r7, %r6, %r8;
	div.s32 	%r2, %r1, %r3;
	setp.lt.s32	%p1, %r2, %r5;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB8_2;
	bra.uni 	BB8_1;

BB8_1:
	rem.s32 	%r9, %r1, %r3;
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r10, %r2, %r3, %r9;
	mul.wide.s32 	%rd5, %r10, 8;
	add.s64 	%rd6, %rd4, %rd5;
	div.s32 	%r11, %r9, %r4;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r11, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f64 	%fd1, [%rd9];
	ld.global.f64 	%fd2, [%rd6];
	mul.f64 	%fd3, %fd2, %fd1;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd5;
	st.global.f64 	[%rd11], %fd3;

BB8_2:
	ret;
}

	// .globl	compare_and_set
.visible .entry compare_and_set(
	.param .u64 compare_and_set_param_0,
	.param .u64 compare_and_set_param_1,
	.param .u32 compare_and_set_param_2,
	.param .u32 compare_and_set_param_3,
	.param .f64 compare_and_set_param_4,
	.param .f64 compare_and_set_param_5,
	.param .f64 compare_and_set_param_6,
	.param .f64 compare_and_set_param_7,
	.param .f64 compare_and_set_param_8
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [compare_and_set_param_0];
	ld.param.u64 	%rd3, [compare_and_set_param_1];
	ld.param.u32 	%r2, [compare_and_set_param_2];
	ld.param.u32 	%r3, [compare_and_set_param_3];
	ld.param.f64 	%fd2, [compare_and_set_param_4];
	ld.param.f64 	%fd3, [compare_and_set_param_5];
	ld.param.f64 	%fd4, [compare_and_set_param_6];
	ld.param.f64 	%fd5, [compare_and_set_param_7];
	ld.param.f64 	%fd6, [compare_and_set_param_8];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r7, %r5, %r4, %r6;
	div.s32 	%r8, %r7, %r3;
	rem.s32 	%r9, %r7, %r3;
	mad.lo.s32 	%r1, %r8, %r3, %r9;
	setp.lt.s32	%p1, %r8, %r2;
	setp.gt.s32	%p2, %r3, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB9_6;
	bra.uni 	BB9_1;

BB9_1:
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	sub.f64 	%fd7, %fd1, %fd2;
	abs.f64 	%fd8, %fd7;
	setp.lt.f64	%p4, %fd8, %fd3;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd1, %rd7, %rd5;
	@%p4 bra 	BB9_5;
	bra.uni 	BB9_2;

BB9_5:
	st.global.f64 	[%rd1], %fd4;
	bra.uni 	BB9_6;

BB9_2:
	setp.lt.f64	%p5, %fd1, %fd2;
	@%p5 bra 	BB9_4;
	bra.uni 	BB9_3;

BB9_4:
	st.global.f64 	[%rd1], %fd5;
	bra.uni 	BB9_6;

BB9_3:
	st.global.f64 	[%rd1], %fd6;

BB9_6:
	ret;
}

	// .globl	matrix_matrix_cellwise_op
.visible .entry matrix_matrix_cellwise_op(
	.param .u64 matrix_matrix_cellwise_op_param_0,
	.param .u64 matrix_matrix_cellwise_op_param_1,
	.param .u64 matrix_matrix_cellwise_op_param_2,
	.param .u32 matrix_matrix_cellwise_op_param_3,
	.param .u32 matrix_matrix_cellwise_op_param_4,
	.param .u32 matrix_matrix_cellwise_op_param_5,
	.param .u32 matrix_matrix_cellwise_op_param_6,
	.param .u32 matrix_matrix_cellwise_op_param_7
)
{
	.reg .pred 	%p<77>;
	.reg .b32 	%r<65>;
	.reg .f64 	%fd<55>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd2, [matrix_matrix_cellwise_op_param_0];
	ld.param.u64 	%rd3, [matrix_matrix_cellwise_op_param_1];
	ld.param.u64 	%rd4, [matrix_matrix_cellwise_op_param_2];
	ld.param.u32 	%r14, [matrix_matrix_cellwise_op_param_3];
	ld.param.u32 	%r10, [matrix_matrix_cellwise_op_param_4];
	ld.param.u32 	%r11, [matrix_matrix_cellwise_op_param_5];
	ld.param.u32 	%r12, [matrix_matrix_cellwise_op_param_6];
	ld.param.u32 	%r13, [matrix_matrix_cellwise_op_param_7];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	div.s32 	%r1, %r18, %r10;
	rem.s32 	%r2, %r18, %r10;
	setp.lt.s32	%p2, %r1, %r14;
	setp.gt.s32	%p3, %r10, -1;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB10_73;
	bra.uni 	BB10_1;

BB10_1:
	mad.lo.s32 	%r3, %r1, %r10, %r2;
	setp.eq.s32	%p5, %r11, 1;
	mov.u32 	%r63, %r1;
	@%p5 bra 	BB10_5;

	setp.ne.s32	%p6, %r11, 2;
	mov.u32 	%r64, %r3;
	@%p6 bra 	BB10_4;

	mov.u32 	%r64, %r2;

BB10_4:
	mov.u32 	%r58, %r64;
	mov.u32 	%r4, %r58;
	mov.u32 	%r63, %r4;

BB10_5:
	mov.u32 	%r5, %r63;
	setp.eq.s32	%p7, %r12, 1;
	mov.u32 	%r61, %r1;
	@%p7 bra 	BB10_9;

	setp.ne.s32	%p8, %r12, 2;
	mov.u32 	%r62, %r3;
	@%p8 bra 	BB10_8;

	mov.u32 	%r62, %r2;

BB10_8:
	mov.u32 	%r61, %r62;

BB10_9:
	cvta.to.global.u64 	%rd5, %rd3;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r5, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f64 	%fd1, [%rd8];
	mul.wide.s32 	%rd9, %r61, 8;
	add.s64 	%rd10, %rd5, %rd9;
	ld.global.f64 	%fd2, [%rd10];
	mov.f64 	%fd54, 0d7FEFFFFFFFFFFFFF;
	setp.gt.s32	%p9, %r13, 8;
	@%p9 bra 	BB10_26;

	setp.gt.s32	%p23, %r13, 3;
	@%p23 bra 	BB10_18;

	setp.gt.s32	%p30, %r13, 1;
	@%p30 bra 	BB10_15;

	setp.eq.s32	%p33, %r13, 0;
	@%p33 bra 	BB10_71;
	bra.uni 	BB10_13;

BB10_71:
	add.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_26:
	setp.gt.s32	%p10, %r13, 13;
	@%p10 bra 	BB10_35;

	setp.gt.s32	%p17, %r13, 10;
	@%p17 bra 	BB10_31;

	setp.eq.s32	%p21, %r13, 9;
	@%p21 bra 	BB10_53;
	bra.uni 	BB10_29;

BB10_53:
	setp.eq.f64	%p50, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p50;
	bra.uni 	BB10_72;

BB10_18:
	setp.gt.s32	%p24, %r13, 5;
	@%p24 bra 	BB10_22;

	setp.eq.s32	%p28, %r13, 4;
	@%p28 bra 	BB10_56;
	bra.uni 	BB10_20;

BB10_56:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd1;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r9}, %fd2;
	}
	bfe.u32 	%r31, %r9, 20, 11;
	add.s32 	%r32, %r31, -1012;
	mov.b64 	 %rd15, %fd2;
	shl.b64 	%rd1, %rd15, %r32;
	setp.eq.s64	%p55, %rd1, -9223372036854775808;
	abs.f64 	%fd19, %fd1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd19;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd2;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd53, [retval0+0];
	
	//{
	}// Callseq End 0
	setp.lt.s32	%p56, %r8, 0;
	and.pred  	%p1, %p56, %p55;
	@!%p1 bra 	BB10_58;
	bra.uni 	BB10_57;

BB10_57:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r33}, %fd53;
	}
	xor.b32  	%r34, %r33, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r35, %temp}, %fd53;
	}
	mov.b64 	%fd53, {%r35, %r34};

BB10_58:
	mov.f64 	%fd52, %fd53;
	setp.eq.f64	%p57, %fd1, 0d0000000000000000;
	@%p57 bra 	BB10_61;
	bra.uni 	BB10_59;

BB10_61:
	selp.b32	%r36, %r8, 0, %p55;
	or.b32  	%r37, %r36, 2146435072;
	setp.lt.s32	%p61, %r9, 0;
	selp.b32	%r38, %r37, %r36, %p61;
	mov.u32 	%r39, 0;
	mov.b64 	%fd52, {%r39, %r38};
	bra.uni 	BB10_62;

BB10_35:
	setp.gt.s32	%p11, %r13, 15;
	@%p11 bra 	BB10_39;

	setp.eq.s32	%p15, %r13, 14;
	@%p15 bra 	BB10_50;
	bra.uni 	BB10_37;

BB10_50:
	cvt.rni.s64.f64	%rd11, %fd1;
	cvt.rni.s64.f64	%rd12, %fd2;
	cvt.u32.u64	%r25, %rd11;
	cvt.u32.u64	%r26, %rd12;
	or.b32  	%r27, %r26, %r25;
	setp.eq.s32	%p47, %r27, 0;
	selp.f64	%fd54, 0d0000000000000000, 0d3FF0000000000000, %p47;
	bra.uni 	BB10_72;

BB10_15:
	setp.eq.s32	%p31, %r13, 2;
	@%p31 bra 	BB10_70;
	bra.uni 	BB10_16;

BB10_70:
	mul.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_31:
	setp.eq.s32	%p18, %r13, 11;
	@%p18 bra 	BB10_52;

	setp.eq.s32	%p19, %r13, 12;
	@%p19 bra 	BB10_51;
	bra.uni 	BB10_33;

BB10_51:
	max.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_22:
	setp.eq.s32	%p25, %r13, 6;
	@%p25 bra 	BB10_55;

	setp.eq.s32	%p26, %r13, 7;
	@%p26 bra 	BB10_54;
	bra.uni 	BB10_24;

BB10_54:
	setp.gt.f64	%p52, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p52;
	bra.uni 	BB10_72;

BB10_39:
	setp.eq.s32	%p12, %r13, 16;
	@%p12 bra 	BB10_49;

	setp.eq.s32	%p13, %r13, 17;
	@%p13 bra 	BB10_45;
	bra.uni 	BB10_41;

BB10_45:
	setp.eq.f64	%p39, %fd2, 0d0000000000000000;
	setp.eq.f64	%p40, %fd2, 0d8000000000000000;
	or.pred  	%p41, %p39, %p40;
	mov.f64 	%fd54, 0d7FF8000000000000;
	@%p41 bra 	BB10_72;

	div.rn.f64 	%fd54, %fd1, %fd2;
	abs.f64 	%fd39, %fd54;
	setp.gtu.f64	%p42, %fd39, 0d7FF0000000000000;
	@%p42 bra 	BB10_72;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd54;
	}
	and.b32  	%r24, %r23, 2147483647;
	setp.ne.s32	%p43, %r24, 2146435072;
	setp.ne.s32	%p44, %r22, 0;
	or.pred  	%p45, %p43, %p44;
	@!%p45 bra 	BB10_72;
	bra.uni 	BB10_48;

BB10_48:
	cvt.rmi.f64.f64	%fd40, %fd54;
	mul.f64 	%fd41, %fd2, %fd40;
	sub.f64 	%fd54, %fd1, %fd41;
	bra.uni 	BB10_72;

BB10_13:
	setp.eq.s32	%p34, %r13, 1;
	@%p34 bra 	BB10_14;
	bra.uni 	BB10_72;

BB10_14:
	sub.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_29:
	setp.eq.s32	%p22, %r13, 10;
	@%p22 bra 	BB10_30;
	bra.uni 	BB10_72;

BB10_30:
	setp.neu.f64	%p49, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p49;
	bra.uni 	BB10_72;

BB10_20:
	setp.eq.s32	%p29, %r13, 5;
	@%p29 bra 	BB10_21;
	bra.uni 	BB10_72;

BB10_21:
	setp.lt.f64	%p54, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p54;
	bra.uni 	BB10_72;

BB10_37:
	setp.eq.s32	%p16, %r13, 15;
	@%p16 bra 	BB10_38;
	bra.uni 	BB10_72;

BB10_38:
	mul.f64 	%fd43, %fd1, %fd2;
	mov.f64 	%fd44, 0d3FF0000000000000;
	sub.f64 	%fd54, %fd44, %fd43;
	bra.uni 	BB10_72;

BB10_16:
	setp.eq.s32	%p32, %r13, 3;
	@%p32 bra 	BB10_17;
	bra.uni 	BB10_72;

BB10_17:
	div.rn.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_52:
	min.f64 	%fd54, %fd1, %fd2;
	bra.uni 	BB10_72;

BB10_33:
	setp.eq.s32	%p20, %r13, 13;
	@%p20 bra 	BB10_34;
	bra.uni 	BB10_72;

BB10_34:
	cvt.rni.s64.f64	%rd13, %fd1;
	cvt.rni.s64.f64	%rd14, %fd2;
	cvt.u32.u64	%r28, %rd13;
	cvt.u32.u64	%r29, %rd14;
	and.b32  	%r30, %r29, %r28;
	setp.eq.s32	%p48, %r30, 0;
	selp.f64	%fd54, 0d0000000000000000, 0d3FF0000000000000, %p48;
	bra.uni 	BB10_72;

BB10_55:
	setp.le.f64	%p53, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p53;
	bra.uni 	BB10_72;

BB10_24:
	setp.eq.s32	%p27, %r13, 8;
	@%p27 bra 	BB10_25;
	bra.uni 	BB10_72;

BB10_25:
	setp.ge.f64	%p51, %fd1, %fd2;
	selp.f64	%fd54, 0d3FF0000000000000, 0d0000000000000000, %p51;
	bra.uni 	BB10_72;

BB10_49:
	setp.neu.f64	%p46, %fd1, 0d0000000000000000;
	sub.f64 	%fd42, %fd1, %fd2;
	selp.f64	%fd54, %fd42, 0d0000000000000000, %p46;
	bra.uni 	BB10_72;

BB10_41:
	setp.ne.s32	%p14, %r13, 18;
	@%p14 bra 	BB10_72;

	div.rn.f64 	%fd54, %fd1, %fd2;
	abs.f64 	%fd37, %fd54;
	setp.gtu.f64	%p35, %fd37, 0d7FF0000000000000;
	@%p35 bra 	BB10_72;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd54;
	}
	and.b32  	%r21, %r20, 2147483647;
	setp.ne.s32	%p36, %r21, 2146435072;
	setp.ne.s32	%p37, %r19, 0;
	or.pred  	%p38, %p36, %p37;
	@!%p38 bra 	BB10_72;
	bra.uni 	BB10_44;

BB10_44:
	cvt.rmi.f64.f64	%fd54, %fd54;
	bra.uni 	BB10_72;

BB10_59:
	setp.gt.s32	%p58, %r8, -1;
	@%p58 bra 	BB10_62;

	cvt.rzi.f64.f64	%fd45, %fd2;
	setp.neu.f64	%p59, %fd45, %fd2;
	selp.f64	%fd52, 0dFFF8000000000000, %fd52, %p59;

BB10_62:
	mov.f64 	%fd25, %fd52;
	add.f64 	%fd26, %fd1, %fd2;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r40}, %fd26;
	}
	and.b32  	%r41, %r40, 2146435072;
	setp.ne.s32	%p62, %r41, 2146435072;
	mov.f64 	%fd51, %fd25;
	@%p62 bra 	BB10_69;

	setp.gtu.f64	%p63, %fd19, 0d7FF0000000000000;
	mov.f64 	%fd51, %fd26;
	@%p63 bra 	BB10_69;

	abs.f64 	%fd46, %fd2;
	setp.gtu.f64	%p64, %fd46, 0d7FF0000000000000;
	mov.f64 	%fd50, %fd26;
	mov.f64 	%fd51, %fd50;
	@%p64 bra 	BB10_69;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r42, %temp}, %fd2;
	}
	and.b32  	%r43, %r9, 2147483647;
	setp.eq.s32	%p65, %r43, 2146435072;
	setp.eq.s32	%p66, %r42, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	BB10_68;
	bra.uni 	BB10_66;

BB10_68:
	setp.gt.f64	%p71, %fd19, 0d3FF0000000000000;
	selp.b32	%r51, 2146435072, 0, %p71;
	xor.b32  	%r52, %r51, 2146435072;
	setp.lt.s32	%p72, %r9, 0;
	selp.b32	%r53, %r52, %r51, %p72;
	setp.eq.f64	%p73, %fd1, 0dBFF0000000000000;
	selp.b32	%r54, 1072693248, %r53, %p73;
	mov.u32 	%r55, 0;
	mov.b64 	%fd51, {%r55, %r54};
	bra.uni 	BB10_69;

BB10_66:
	{
	.reg .b32 %temp; 
	mov.b64 	{%r44, %temp}, %fd1;
	}
	and.b32  	%r45, %r8, 2147483647;
	setp.eq.s32	%p68, %r45, 2146435072;
	setp.eq.s32	%p69, %r44, 0;
	and.pred  	%p70, %p68, %p69;
	mov.f64 	%fd51, %fd25;
	@!%p70 bra 	BB10_69;
	bra.uni 	BB10_67;

BB10_67:
	shr.s32 	%r46, %r9, 31;
	and.b32  	%r47, %r46, -2146435072;
	selp.b32	%r48, -1048576, 2146435072, %p1;
	add.s32 	%r49, %r48, %r47;
	mov.u32 	%r50, 0;
	mov.b64 	%fd51, {%r50, %r49};

BB10_69:
	setp.eq.f64	%p74, %fd2, 0d0000000000000000;
	setp.eq.f64	%p75, %fd1, 0d3FF0000000000000;
	or.pred  	%p76, %p75, %p74;
	selp.f64	%fd54, 0d3FF0000000000000, %fd51, %p76;

BB10_72:
	cvta.to.global.u64 	%rd16, %rd4;
	mul.wide.s32 	%rd17, %r3, 8;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f64 	[%rd18], %fd54;
	bar.sync 	0;

BB10_73:
	ret;
}

	// .globl	matrix_scalar_op
.visible .entry matrix_scalar_op(
	.param .u64 matrix_scalar_op_param_0,
	.param .f64 matrix_scalar_op_param_1,
	.param .u64 matrix_scalar_op_param_2,
	.param .u32 matrix_scalar_op_param_3,
	.param .u32 matrix_scalar_op_param_4,
	.param .u32 matrix_scalar_op_param_5
)
{
	.reg .pred 	%p<141>;
	.reg .b32 	%r<86>;
	.reg .f64 	%fd<107>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd4, [matrix_scalar_op_param_0];
	ld.param.f64 	%fd68, [matrix_scalar_op_param_1];
	ld.param.u64 	%rd5, [matrix_scalar_op_param_2];
	ld.param.u32 	%r8, [matrix_scalar_op_param_3];
	ld.param.u32 	%r6, [matrix_scalar_op_param_4];
	ld.param.u32 	%r7, [matrix_scalar_op_param_5];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	setp.ge.s32	%p3, %r1, %r8;
	@%p3 bra 	BB11_130;

	cvta.to.global.u64 	%rd6, %rd5;
	cvta.to.global.u64 	%rd7, %rd4;
	mul.wide.s32 	%rd8, %r1, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f64 	%fd1, [%rd9];
	add.s64 	%rd1, %rd6, %rd8;
	setp.eq.s32	%p4, %r7, 0;
	@%p4 bra 	BB11_66;

	mov.f64 	%fd98, 0d7FEFFFFFFFFFFFFF;
	setp.gt.s32	%p5, %r6, 8;
	@%p5 bra 	BB11_19;

	setp.gt.s32	%p19, %r6, 3;
	@%p19 bra 	BB11_11;

	setp.gt.s32	%p26, %r6, 1;
	@%p26 bra 	BB11_8;

	setp.eq.s32	%p29, %r6, 0;
	@%p29 bra 	BB11_64;
	bra.uni 	BB11_6;

BB11_64:
	add.f64 	%fd98, %fd1, %fd68;
	bra.uni 	BB11_65;

BB11_66:
	mov.f64 	%fd106, 0d7FEFFFFFFFFFFFFF;
	setp.gt.s32	%p73, %r6, 8;
	@%p73 bra 	BB11_83;

	setp.gt.s32	%p87, %r6, 3;
	@%p87 bra 	BB11_75;

	setp.gt.s32	%p94, %r6, 1;
	@%p94 bra 	BB11_72;

	setp.eq.s32	%p97, %r6, 0;
	@%p97 bra 	BB11_128;
	bra.uni 	BB11_70;

BB11_128:
	add.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_19:
	setp.gt.s32	%p6, %r6, 13;
	@%p6 bra 	BB11_28;

	setp.gt.s32	%p13, %r6, 10;
	@%p13 bra 	BB11_24;

	setp.eq.s32	%p17, %r6, 9;
	@%p17 bra 	BB11_46;
	bra.uni 	BB11_22;

BB11_46:
	setp.eq.f64	%p46, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p46;
	bra.uni 	BB11_65;

BB11_83:
	setp.gt.s32	%p74, %r6, 13;
	@%p74 bra 	BB11_92;

	setp.gt.s32	%p81, %r6, 10;
	@%p81 bra 	BB11_88;

	setp.eq.s32	%p85, %r6, 9;
	@%p85 bra 	BB11_110;
	bra.uni 	BB11_86;

BB11_110:
	setp.eq.f64	%p114, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p114;
	bra.uni 	BB11_129;

BB11_11:
	setp.gt.s32	%p20, %r6, 5;
	@%p20 bra 	BB11_15;

	setp.eq.s32	%p24, %r6, 4;
	@%p24 bra 	BB11_49;
	bra.uni 	BB11_13;

BB11_49:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd68;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd1;
	}
	bfe.u32 	%r24, %r3, 20, 11;
	add.s32 	%r25, %r24, -1012;
	mov.b64 	 %rd14, %fd1;
	shl.b64 	%rd2, %rd14, %r25;
	setp.eq.s64	%p51, %rd2, -9223372036854775808;
	abs.f64 	%fd18, %fd68;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd18;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd97, [retval0+0];
	
	//{
	}// Callseq End 1
	setp.lt.s32	%p52, %r2, 0;
	and.pred  	%p1, %p52, %p51;
	@!%p1 bra 	BB11_51;
	bra.uni 	BB11_50;

BB11_50:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r26}, %fd97;
	}
	xor.b32  	%r27, %r26, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r28, %temp}, %fd97;
	}
	mov.b64 	%fd97, {%r28, %r27};

BB11_51:
	mov.f64 	%fd96, %fd97;
	setp.eq.f64	%p53, %fd68, 0d0000000000000000;
	@%p53 bra 	BB11_54;
	bra.uni 	BB11_52;

BB11_54:
	selp.b32	%r29, %r2, 0, %p51;
	or.b32  	%r30, %r29, 2146435072;
	setp.lt.s32	%p57, %r3, 0;
	selp.b32	%r31, %r30, %r29, %p57;
	mov.u32 	%r32, 0;
	mov.b64 	%fd96, {%r32, %r31};
	bra.uni 	BB11_55;

BB11_28:
	setp.gt.s32	%p7, %r6, 15;
	@%p7 bra 	BB11_32;

	setp.eq.s32	%p11, %r6, 14;
	@%p11 bra 	BB11_43;
	bra.uni 	BB11_30;

BB11_43:
	cvt.rni.s64.f64	%rd10, %fd68;
	cvt.rni.s64.f64	%rd11, %fd1;
	cvt.u32.u64	%r18, %rd10;
	cvt.u32.u64	%r19, %rd11;
	or.b32  	%r20, %r19, %r18;
	setp.eq.s32	%p43, %r20, 0;
	selp.f64	%fd98, 0d0000000000000000, 0d3FF0000000000000, %p43;
	bra.uni 	BB11_65;

BB11_75:
	setp.gt.s32	%p88, %r6, 5;
	@%p88 bra 	BB11_79;

	setp.eq.s32	%p92, %r6, 4;
	@%p92 bra 	BB11_113;
	bra.uni 	BB11_77;

BB11_113:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r4}, %fd1;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r5}, %fd68;
	}
	bfe.u32 	%r61, %r5, 20, 11;
	add.s32 	%r62, %r61, -1012;
	mov.b64 	 %rd19, %fd68;
	shl.b64 	%rd3, %rd19, %r62;
	setp.eq.s64	%p119, %rd3, -9223372036854775808;
	abs.f64 	%fd51, %fd1;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd51;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd68;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd105, [retval0+0];
	
	//{
	}// Callseq End 2
	setp.lt.s32	%p120, %r4, 0;
	and.pred  	%p2, %p120, %p119;
	@!%p2 bra 	BB11_115;
	bra.uni 	BB11_114;

BB11_114:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r63}, %fd105;
	}
	xor.b32  	%r64, %r63, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r65, %temp}, %fd105;
	}
	mov.b64 	%fd105, {%r65, %r64};

BB11_115:
	mov.f64 	%fd104, %fd105;
	setp.eq.f64	%p121, %fd1, 0d0000000000000000;
	@%p121 bra 	BB11_118;
	bra.uni 	BB11_116;

BB11_118:
	selp.b32	%r66, %r4, 0, %p119;
	or.b32  	%r67, %r66, 2146435072;
	setp.lt.s32	%p125, %r5, 0;
	selp.b32	%r68, %r67, %r66, %p125;
	mov.u32 	%r69, 0;
	mov.b64 	%fd104, {%r69, %r68};
	bra.uni 	BB11_119;

BB11_92:
	setp.gt.s32	%p75, %r6, 15;
	@%p75 bra 	BB11_96;

	setp.eq.s32	%p79, %r6, 14;
	@%p79 bra 	BB11_107;
	bra.uni 	BB11_94;

BB11_107:
	cvt.rni.s64.f64	%rd15, %fd1;
	cvt.rni.s64.f64	%rd16, %fd68;
	cvt.u32.u64	%r55, %rd15;
	cvt.u32.u64	%r56, %rd16;
	or.b32  	%r57, %r56, %r55;
	setp.eq.s32	%p111, %r57, 0;
	selp.f64	%fd106, 0d0000000000000000, 0d3FF0000000000000, %p111;
	bra.uni 	BB11_129;

BB11_8:
	setp.eq.s32	%p27, %r6, 2;
	@%p27 bra 	BB11_63;
	bra.uni 	BB11_9;

BB11_63:
	mul.f64 	%fd98, %fd1, %fd68;
	bra.uni 	BB11_65;

BB11_24:
	setp.eq.s32	%p14, %r6, 11;
	@%p14 bra 	BB11_45;

	setp.eq.s32	%p15, %r6, 12;
	@%p15 bra 	BB11_44;
	bra.uni 	BB11_26;

BB11_44:
	max.f64 	%fd98, %fd68, %fd1;
	bra.uni 	BB11_65;

BB11_15:
	setp.eq.s32	%p21, %r6, 6;
	@%p21 bra 	BB11_48;

	setp.eq.s32	%p22, %r6, 7;
	@%p22 bra 	BB11_47;
	bra.uni 	BB11_17;

BB11_47:
	setp.lt.f64	%p48, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p48;
	bra.uni 	BB11_65;

BB11_32:
	setp.eq.s32	%p8, %r6, 16;
	@%p8 bra 	BB11_42;

	setp.eq.s32	%p9, %r6, 17;
	@%p9 bra 	BB11_38;
	bra.uni 	BB11_34;

BB11_38:
	setp.eq.f64	%p35, %fd1, 0d0000000000000000;
	setp.eq.f64	%p36, %fd1, 0d8000000000000000;
	or.pred  	%p37, %p35, %p36;
	mov.f64 	%fd98, 0d7FF8000000000000;
	@%p37 bra 	BB11_65;

	div.rn.f64 	%fd98, %fd68, %fd1;
	abs.f64 	%fd72, %fd98;
	setp.gtu.f64	%p38, %fd72, 0d7FF0000000000000;
	@%p38 bra 	BB11_65;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r15, %temp}, %fd98;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r16}, %fd98;
	}
	and.b32  	%r17, %r16, 2147483647;
	setp.ne.s32	%p39, %r17, 2146435072;
	setp.ne.s32	%p40, %r15, 0;
	or.pred  	%p41, %p39, %p40;
	@!%p41 bra 	BB11_65;
	bra.uni 	BB11_41;

BB11_41:
	cvt.rmi.f64.f64	%fd73, %fd98;
	mul.f64 	%fd74, %fd1, %fd73;
	sub.f64 	%fd98, %fd68, %fd74;
	bra.uni 	BB11_65;

BB11_72:
	setp.eq.s32	%p95, %r6, 2;
	@%p95 bra 	BB11_127;
	bra.uni 	BB11_73;

BB11_127:
	mul.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_88:
	setp.eq.s32	%p82, %r6, 11;
	@%p82 bra 	BB11_109;

	setp.eq.s32	%p83, %r6, 12;
	@%p83 bra 	BB11_108;
	bra.uni 	BB11_90;

BB11_108:
	max.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_79:
	setp.eq.s32	%p89, %r6, 6;
	@%p89 bra 	BB11_112;

	setp.eq.s32	%p90, %r6, 7;
	@%p90 bra 	BB11_111;
	bra.uni 	BB11_81;

BB11_111:
	setp.gt.f64	%p116, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p116;
	bra.uni 	BB11_129;

BB11_96:
	setp.eq.s32	%p76, %r6, 16;
	@%p76 bra 	BB11_106;

	setp.eq.s32	%p77, %r6, 17;
	@%p77 bra 	BB11_102;
	bra.uni 	BB11_98;

BB11_102:
	setp.eq.f64	%p103, %fd68, 0d0000000000000000;
	setp.eq.f64	%p104, %fd68, 0d8000000000000000;
	or.pred  	%p105, %p103, %p104;
	mov.f64 	%fd106, 0d7FF8000000000000;
	@%p105 bra 	BB11_129;

	div.rn.f64 	%fd106, %fd1, %fd68;
	abs.f64 	%fd83, %fd106;
	setp.gtu.f64	%p106, %fd83, 0d7FF0000000000000;
	@%p106 bra 	BB11_129;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r52, %temp}, %fd106;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r53}, %fd106;
	}
	and.b32  	%r54, %r53, 2147483647;
	setp.ne.s32	%p107, %r54, 2146435072;
	setp.ne.s32	%p108, %r52, 0;
	or.pred  	%p109, %p107, %p108;
	@!%p109 bra 	BB11_129;
	bra.uni 	BB11_105;

BB11_105:
	cvt.rmi.f64.f64	%fd84, %fd106;
	mul.f64 	%fd85, %fd84, %fd68;
	sub.f64 	%fd106, %fd1, %fd85;
	bra.uni 	BB11_129;

BB11_6:
	setp.eq.s32	%p30, %r6, 1;
	@%p30 bra 	BB11_7;
	bra.uni 	BB11_65;

BB11_7:
	sub.f64 	%fd98, %fd68, %fd1;
	bra.uni 	BB11_65;

BB11_22:
	setp.eq.s32	%p18, %r6, 10;
	@%p18 bra 	BB11_23;
	bra.uni 	BB11_65;

BB11_23:
	setp.neu.f64	%p45, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p45;
	bra.uni 	BB11_65;

BB11_13:
	setp.eq.s32	%p25, %r6, 5;
	@%p25 bra 	BB11_14;
	bra.uni 	BB11_65;

BB11_14:
	setp.gt.f64	%p50, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p50;
	bra.uni 	BB11_65;

BB11_30:
	setp.eq.s32	%p12, %r6, 15;
	@%p12 bra 	BB11_31;
	bra.uni 	BB11_65;

BB11_31:
	mul.f64 	%fd76, %fd1, %fd68;
	mov.f64 	%fd77, 0d3FF0000000000000;
	sub.f64 	%fd98, %fd77, %fd76;
	bra.uni 	BB11_65;

BB11_9:
	setp.eq.s32	%p28, %r6, 3;
	@%p28 bra 	BB11_10;
	bra.uni 	BB11_65;

BB11_10:
	div.rn.f64 	%fd98, %fd68, %fd1;
	bra.uni 	BB11_65;

BB11_45:
	min.f64 	%fd98, %fd68, %fd1;
	bra.uni 	BB11_65;

BB11_26:
	setp.eq.s32	%p16, %r6, 13;
	@%p16 bra 	BB11_27;
	bra.uni 	BB11_65;

BB11_27:
	cvt.rni.s64.f64	%rd12, %fd68;
	cvt.rni.s64.f64	%rd13, %fd1;
	cvt.u32.u64	%r21, %rd12;
	cvt.u32.u64	%r22, %rd13;
	and.b32  	%r23, %r22, %r21;
	setp.eq.s32	%p44, %r23, 0;
	selp.f64	%fd98, 0d0000000000000000, 0d3FF0000000000000, %p44;
	bra.uni 	BB11_65;

BB11_48:
	setp.ge.f64	%p49, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p49;
	bra.uni 	BB11_65;

BB11_17:
	setp.eq.s32	%p23, %r6, 8;
	@%p23 bra 	BB11_18;
	bra.uni 	BB11_65;

BB11_18:
	setp.le.f64	%p47, %fd1, %fd68;
	selp.f64	%fd98, 0d3FF0000000000000, 0d0000000000000000, %p47;
	bra.uni 	BB11_65;

BB11_42:
	setp.neu.f64	%p42, %fd68, 0d0000000000000000;
	sub.f64 	%fd75, %fd68, %fd1;
	selp.f64	%fd98, %fd75, 0d0000000000000000, %p42;
	bra.uni 	BB11_65;

BB11_34:
	setp.ne.s32	%p10, %r6, 18;
	@%p10 bra 	BB11_65;

	div.rn.f64 	%fd98, %fd68, %fd1;
	abs.f64 	%fd70, %fd98;
	setp.gtu.f64	%p31, %fd70, 0d7FF0000000000000;
	@%p31 bra 	BB11_65;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r12, %temp}, %fd98;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %fd98;
	}
	and.b32  	%r14, %r13, 2147483647;
	setp.ne.s32	%p32, %r14, 2146435072;
	setp.ne.s32	%p33, %r12, 0;
	or.pred  	%p34, %p32, %p33;
	@!%p34 bra 	BB11_65;
	bra.uni 	BB11_37;

BB11_37:
	cvt.rmi.f64.f64	%fd98, %fd98;
	bra.uni 	BB11_65;

BB11_70:
	setp.eq.s32	%p98, %r6, 1;
	@%p98 bra 	BB11_71;
	bra.uni 	BB11_129;

BB11_71:
	sub.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_86:
	setp.eq.s32	%p86, %r6, 10;
	@%p86 bra 	BB11_87;
	bra.uni 	BB11_129;

BB11_87:
	setp.neu.f64	%p113, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p113;
	bra.uni 	BB11_129;

BB11_77:
	setp.eq.s32	%p93, %r6, 5;
	@%p93 bra 	BB11_78;
	bra.uni 	BB11_129;

BB11_78:
	setp.lt.f64	%p118, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p118;
	bra.uni 	BB11_129;

BB11_94:
	setp.eq.s32	%p80, %r6, 15;
	@%p80 bra 	BB11_95;
	bra.uni 	BB11_129;

BB11_95:
	mul.f64 	%fd87, %fd1, %fd68;
	mov.f64 	%fd88, 0d3FF0000000000000;
	sub.f64 	%fd106, %fd88, %fd87;
	bra.uni 	BB11_129;

BB11_73:
	setp.eq.s32	%p96, %r6, 3;
	@%p96 bra 	BB11_74;
	bra.uni 	BB11_129;

BB11_74:
	div.rn.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_109:
	min.f64 	%fd106, %fd1, %fd68;
	bra.uni 	BB11_129;

BB11_90:
	setp.eq.s32	%p84, %r6, 13;
	@%p84 bra 	BB11_91;
	bra.uni 	BB11_129;

BB11_91:
	cvt.rni.s64.f64	%rd17, %fd1;
	cvt.rni.s64.f64	%rd18, %fd68;
	cvt.u32.u64	%r58, %rd17;
	cvt.u32.u64	%r59, %rd18;
	and.b32  	%r60, %r59, %r58;
	setp.eq.s32	%p112, %r60, 0;
	selp.f64	%fd106, 0d0000000000000000, 0d3FF0000000000000, %p112;
	bra.uni 	BB11_129;

BB11_112:
	setp.le.f64	%p117, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p117;
	bra.uni 	BB11_129;

BB11_81:
	setp.eq.s32	%p91, %r6, 8;
	@%p91 bra 	BB11_82;
	bra.uni 	BB11_129;

BB11_82:
	setp.ge.f64	%p115, %fd1, %fd68;
	selp.f64	%fd106, 0d3FF0000000000000, 0d0000000000000000, %p115;
	bra.uni 	BB11_129;

BB11_106:
	setp.neu.f64	%p110, %fd1, 0d0000000000000000;
	sub.f64 	%fd86, %fd1, %fd68;
	selp.f64	%fd106, %fd86, 0d0000000000000000, %p110;
	bra.uni 	BB11_129;

BB11_98:
	setp.ne.s32	%p78, %r6, 18;
	@%p78 bra 	BB11_129;

	div.rn.f64 	%fd106, %fd1, %fd68;
	abs.f64 	%fd81, %fd106;
	setp.gtu.f64	%p99, %fd81, 0d7FF0000000000000;
	@%p99 bra 	BB11_129;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd106;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd106;
	}
	and.b32  	%r51, %r50, 2147483647;
	setp.ne.s32	%p100, %r51, 2146435072;
	setp.ne.s32	%p101, %r49, 0;
	or.pred  	%p102, %p100, %p101;
	@!%p102 bra 	BB11_129;
	bra.uni 	BB11_101;

BB11_101:
	cvt.rmi.f64.f64	%fd106, %fd106;
	bra.uni 	BB11_129;

BB11_52:
	setp.gt.s32	%p54, %r2, -1;
	@%p54 bra 	BB11_55;

	cvt.rzi.f64.f64	%fd78, %fd1;
	setp.neu.f64	%p55, %fd78, %fd1;
	selp.f64	%fd96, 0dFFF8000000000000, %fd96, %p55;

BB11_55:
	mov.f64 	%fd24, %fd96;
	add.f64 	%fd25, %fd1, %fd68;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r33}, %fd25;
	}
	and.b32  	%r34, %r33, 2146435072;
	setp.ne.s32	%p58, %r34, 2146435072;
	mov.f64 	%fd95, %fd24;
	@%p58 bra 	BB11_62;

	setp.gtu.f64	%p59, %fd18, 0d7FF0000000000000;
	mov.f64 	%fd95, %fd25;
	@%p59 bra 	BB11_62;

	abs.f64 	%fd79, %fd1;
	setp.gtu.f64	%p60, %fd79, 0d7FF0000000000000;
	mov.f64 	%fd94, %fd25;
	mov.f64 	%fd95, %fd94;
	@%p60 bra 	BB11_62;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r35, %temp}, %fd1;
	}
	and.b32  	%r36, %r3, 2147483647;
	setp.eq.s32	%p61, %r36, 2146435072;
	setp.eq.s32	%p62, %r35, 0;
	and.pred  	%p63, %p61, %p62;
	@%p63 bra 	BB11_61;
	bra.uni 	BB11_59;

BB11_61:
	setp.gt.f64	%p67, %fd18, 0d3FF0000000000000;
	selp.b32	%r44, 2146435072, 0, %p67;
	xor.b32  	%r45, %r44, 2146435072;
	setp.lt.s32	%p68, %r3, 0;
	selp.b32	%r46, %r45, %r44, %p68;
	setp.eq.f64	%p69, %fd68, 0dBFF0000000000000;
	selp.b32	%r47, 1072693248, %r46, %p69;
	mov.u32 	%r48, 0;
	mov.b64 	%fd95, {%r48, %r47};
	bra.uni 	BB11_62;

BB11_116:
	setp.gt.s32	%p122, %r4, -1;
	@%p122 bra 	BB11_119;

	cvt.rzi.f64.f64	%fd89, %fd68;
	setp.neu.f64	%p123, %fd89, %fd68;
	selp.f64	%fd104, 0dFFF8000000000000, %fd104, %p123;

BB11_119:
	mov.f64 	%fd57, %fd104;
	add.f64 	%fd58, %fd1, %fd68;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r70}, %fd58;
	}
	and.b32  	%r71, %r70, 2146435072;
	setp.ne.s32	%p126, %r71, 2146435072;
	mov.f64 	%fd103, %fd57;
	@%p126 bra 	BB11_126;

	setp.gtu.f64	%p127, %fd51, 0d7FF0000000000000;
	mov.f64 	%fd103, %fd58;
	@%p127 bra 	BB11_126;

	abs.f64 	%fd90, %fd68;
	setp.gtu.f64	%p128, %fd90, 0d7FF0000000000000;
	mov.f64 	%fd102, %fd58;
	mov.f64 	%fd103, %fd102;
	@%p128 bra 	BB11_126;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r72, %temp}, %fd68;
	}
	and.b32  	%r73, %r5, 2147483647;
	setp.eq.s32	%p129, %r73, 2146435072;
	setp.eq.s32	%p130, %r72, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	BB11_125;
	bra.uni 	BB11_123;

BB11_125:
	setp.gt.f64	%p135, %fd51, 0d3FF0000000000000;
	selp.b32	%r81, 2146435072, 0, %p135;
	xor.b32  	%r82, %r81, 2146435072;
	setp.lt.s32	%p136, %r5, 0;
	selp.b32	%r83, %r82, %r81, %p136;
	setp.eq.f64	%p137, %fd1, 0dBFF0000000000000;
	selp.b32	%r84, 1072693248, %r83, %p137;
	mov.u32 	%r85, 0;
	mov.b64 	%fd103, {%r85, %r84};
	bra.uni 	BB11_126;

BB11_59:
	{
	.reg .b32 %temp; 
	mov.b64 	{%r37, %temp}, %fd68;
	}
	and.b32  	%r38, %r2, 2147483647;
	setp.eq.s32	%p64, %r38, 2146435072;
	setp.eq.s32	%p65, %r37, 0;
	and.pred  	%p66, %p64, %p65;
	mov.f64 	%fd95, %fd24;
	@!%p66 bra 	BB11_62;
	bra.uni 	BB11_60;

BB11_60:
	shr.s32 	%r39, %r3, 31;
	and.b32  	%r40, %r39, -2146435072;
	selp.b32	%r41, -1048576, 2146435072, %p1;
	add.s32 	%r42, %r41, %r40;
	mov.u32 	%r43, 0;
	mov.b64 	%fd95, {%r43, %r42};

BB11_62:
	setp.eq.f64	%p70, %fd1, 0d0000000000000000;
	setp.eq.f64	%p71, %fd68, 0d3FF0000000000000;
	or.pred  	%p72, %p71, %p70;
	selp.f64	%fd98, 0d3FF0000000000000, %fd95, %p72;

BB11_65:
	st.global.f64 	[%rd1], %fd98;
	bra.uni 	BB11_130;

BB11_123:
	{
	.reg .b32 %temp; 
	mov.b64 	{%r74, %temp}, %fd1;
	}
	and.b32  	%r75, %r4, 2147483647;
	setp.eq.s32	%p132, %r75, 2146435072;
	setp.eq.s32	%p133, %r74, 0;
	and.pred  	%p134, %p132, %p133;
	mov.f64 	%fd103, %fd57;
	@!%p134 bra 	BB11_126;
	bra.uni 	BB11_124;

BB11_124:
	shr.s32 	%r76, %r5, 31;
	and.b32  	%r77, %r76, -2146435072;
	selp.b32	%r78, -1048576, 2146435072, %p2;
	add.s32 	%r79, %r78, %r77;
	mov.u32 	%r80, 0;
	mov.b64 	%fd103, {%r80, %r79};

BB11_126:
	setp.eq.f64	%p138, %fd68, 0d0000000000000000;
	setp.eq.f64	%p139, %fd1, 0d3FF0000000000000;
	or.pred  	%p140, %p139, %p138;
	selp.f64	%fd106, 0d3FF0000000000000, %fd103, %p140;

BB11_129:
	st.global.f64 	[%rd1], %fd106;

BB11_130:
	bar.sync 	0;
	ret;
}

	// .globl	fill
.visible .entry fill(
	.param .u64 fill_param_0,
	.param .f64 fill_param_1,
	.param .u32 fill_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [fill_param_0];
	ld.param.f64 	%fd1, [fill_param_1];
	ld.param.u32 	%r2, [fill_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB12_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 8;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f64 	[%rd4], %fd1;

BB12_2:
	ret;
}

	// .globl	cbind
.visible .entry cbind(
	.param .u64 cbind_param_0,
	.param .u64 cbind_param_1,
	.param .u64 cbind_param_2,
	.param .u32 cbind_param_3,
	.param .u32 cbind_param_4,
	.param .u32 cbind_param_5,
	.param .u32 cbind_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [cbind_param_0];
	ld.param.u64 	%rd3, [cbind_param_1];
	ld.param.u64 	%rd4, [cbind_param_2];
	ld.param.u32 	%r7, [cbind_param_3];
	ld.param.u32 	%r4, [cbind_param_4];
	ld.param.u32 	%r5, [cbind_param_5];
	ld.param.u32 	%r6, [cbind_param_6];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	max.s32 	%r12, %r4, %r6;
	div.s32 	%r1, %r11, %r12;
	rem.s32 	%r2, %r11, %r12;
	add.s32 	%r3, %r6, %r4;
	setp.lt.s32	%p1, %r1, %r7;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB13_2;
	bra.uni 	BB13_1;

BB13_1:
	cvta.to.global.u64 	%rd5, %rd2;
	mad.lo.s32 	%r13, %r1, %r4, %r2;
	mul.wide.s32 	%rd6, %r13, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f64 	%fd1, [%rd7];
	mad.lo.s32 	%r14, %r1, %r3, %r2;
	mul.wide.s32 	%rd8, %r14, 8;
	add.s64 	%rd9, %rd1, %rd8;
	st.global.f64 	[%rd9], %fd1;

BB13_2:
	setp.lt.s32	%p4, %r1, %r5;
	setp.lt.s32	%p5, %r2, %r6;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB13_4;
	bra.uni 	BB13_3;

BB13_3:
	cvta.to.global.u64 	%rd10, %rd3;
	mad.lo.s32 	%r15, %r1, %r6, %r2;
	mul.wide.s32 	%rd11, %r15, 8;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f64 	%fd2, [%rd12];
	add.s32 	%r16, %r2, %r4;
	mad.lo.s32 	%r17, %r1, %r3, %r16;
	mul.wide.s32 	%rd13, %r17, 8;
	add.s64 	%rd14, %rd1, %rd13;
	st.global.f64 	[%rd14], %fd2;

BB13_4:
	ret;
}

	// .globl	rbind
.visible .entry rbind(
	.param .u64 rbind_param_0,
	.param .u64 rbind_param_1,
	.param .u64 rbind_param_2,
	.param .u32 rbind_param_3,
	.param .u32 rbind_param_4,
	.param .u32 rbind_param_5,
	.param .u32 rbind_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd2, [rbind_param_0];
	ld.param.u64 	%rd3, [rbind_param_1];
	ld.param.u64 	%rd4, [rbind_param_2];
	ld.param.u32 	%r3, [rbind_param_3];
	ld.param.u32 	%r4, [rbind_param_4];
	ld.param.u32 	%r5, [rbind_param_5];
	ld.param.u32 	%r6, [rbind_param_6];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r10, %r7, %r8, %r9;
	max.s32 	%r11, %r4, %r6;
	div.s32 	%r1, %r10, %r11;
	rem.s32 	%r2, %r10, %r11;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB14_2;
	bra.uni 	BB14_1;

BB14_1:
	cvta.to.global.u64 	%rd5, %rd2;
	mad.lo.s32 	%r12, %r1, %r4, %r2;
	mul.wide.s32 	%rd6, %r12, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f64 	%fd1, [%rd7];
	add.s64 	%rd8, %rd1, %rd6;
	st.global.f64 	[%rd8], %fd1;

BB14_2:
	setp.lt.s32	%p4, %r1, %r5;
	setp.lt.s32	%p5, %r2, %r6;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB14_4;
	bra.uni 	BB14_3;

BB14_3:
	cvta.to.global.u64 	%rd9, %rd3;
	mad.lo.s32 	%r13, %r1, %r6, %r2;
	mul.wide.s32 	%rd10, %r13, 8;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f64 	%fd2, [%rd11];
	add.s32 	%r14, %r1, %r3;
	mad.lo.s32 	%r15, %r14, %r4, %r2;
	mul.wide.s32 	%rd12, %r15, 8;
	add.s64 	%rd13, %rd1, %rd12;
	st.global.f64 	[%rd13], %fd2;

BB14_4:
	ret;
}

	// .globl	reduce_sum
.visible .entry reduce_sum(
	.param .u64 reduce_sum_param_0,
	.param .u64 reduce_sum_param_1,
	.param .u32 reduce_sum_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<79>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [reduce_sum_param_0];
	ld.param.u64 	%rd3, [reduce_sum_param_1];
	ld.param.u32 	%r5, [reduce_sum_param_2];
	mov.u32 	%r6, %tid.x;
	mov.u32 	%r7, %ctaid.x;
	shl.b32 	%r8, %r7, 1;
	mov.u32 	%r9, %ntid.x;
	mad.lo.s32 	%r32, %r8, %r9, %r6;
	mov.f64 	%fd76, 0d0000000000000000;
	mov.f64 	%fd77, %fd76;
	setp.ge.u32	%p1, %r32, %r5;
	@%p1 bra 	BB15_4;

BB15_1:
	mov.f64 	%fd1, %fd77;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r32, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd30, [%rd6];
	add.f64 	%fd78, %fd1, %fd30;
	add.s32 	%r3, %r32, %r9;
	setp.ge.u32	%p2, %r3, %r5;
	@%p2 bra 	BB15_3;

	mul.wide.u32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f64 	%fd31, [%rd9];
	add.f64 	%fd78, %fd78, %fd31;

BB15_3:
	mov.f64 	%fd77, %fd78;
	shl.b32 	%r12, %r9, 1;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r32, %r12, %r13, %r32;
	setp.lt.u32	%p3, %r32, %r5;
	mov.f64 	%fd76, %fd77;
	@%p3 bra 	BB15_1;

BB15_4:
	mov.f64 	%fd74, %fd76;
	mul.wide.u32 	%rd10, %r6, 8;
	mov.u64 	%rd11, sdata;
	add.s64 	%rd1, %rd11, %rd10;
	st.shared.f64 	[%rd1], %fd74;
	bar.sync 	0;
	setp.lt.u32	%p4, %r9, 1024;
	@%p4 bra 	BB15_8;

	setp.gt.u32	%p5, %r6, 511;
	mov.f64 	%fd75, %fd74;
	@%p5 bra 	BB15_7;

	ld.shared.f64 	%fd32, [%rd1+4096];
	add.f64 	%fd75, %fd74, %fd32;
	st.shared.f64 	[%rd1], %fd75;

BB15_7:
	mov.f64 	%fd74, %fd75;
	bar.sync 	0;

BB15_8:
	mov.f64 	%fd72, %fd74;
	setp.lt.u32	%p6, %r9, 512;
	@%p6 bra 	BB15_12;

	setp.gt.u32	%p7, %r6, 255;
	mov.f64 	%fd73, %fd72;
	@%p7 bra 	BB15_11;

	ld.shared.f64 	%fd33, [%rd1+2048];
	add.f64 	%fd73, %fd72, %fd33;
	st.shared.f64 	[%rd1], %fd73;

BB15_11:
	mov.f64 	%fd72, %fd73;
	bar.sync 	0;

BB15_12:
	mov.f64 	%fd70, %fd72;
	setp.lt.u32	%p8, %r9, 256;
	@%p8 bra 	BB15_16;

	setp.gt.u32	%p9, %r6, 127;
	mov.f64 	%fd71, %fd70;
	@%p9 bra 	BB15_15;

	ld.shared.f64 	%fd34, [%rd1+1024];
	add.f64 	%fd71, %fd70, %fd34;
	st.shared.f64 	[%rd1], %fd71;

BB15_15:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB15_16:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p10, %r9, 128;
	@%p10 bra 	BB15_20;

	setp.gt.u32	%p11, %r6, 63;
	mov.f64 	%fd69, %fd68;
	@%p11 bra 	BB15_19;

	ld.shared.f64 	%fd35, [%rd1+512];
	add.f64 	%fd69, %fd68, %fd35;
	st.shared.f64 	[%rd1], %fd69;

BB15_19:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB15_20:
	mov.f64 	%fd67, %fd68;
	setp.gt.u32	%p12, %r6, 31;
	@%p12 bra 	BB15_33;

	setp.lt.u32	%p13, %r9, 64;
	@%p13 bra 	BB15_23;

	ld.volatile.shared.f64 	%fd36, [%rd1+256];
	add.f64 	%fd67, %fd67, %fd36;
	st.volatile.shared.f64 	[%rd1], %fd67;

BB15_23:
	mov.f64 	%fd66, %fd67;
	setp.lt.u32	%p14, %r9, 32;
	@%p14 bra 	BB15_25;

	ld.volatile.shared.f64 	%fd37, [%rd1+128];
	add.f64 	%fd66, %fd66, %fd37;
	st.volatile.shared.f64 	[%rd1], %fd66;

BB15_25:
	mov.f64 	%fd65, %fd66;
	setp.lt.u32	%p15, %r9, 16;
	@%p15 bra 	BB15_27;

	ld.volatile.shared.f64 	%fd38, [%rd1+64];
	add.f64 	%fd65, %fd65, %fd38;
	st.volatile.shared.f64 	[%rd1], %fd65;

BB15_27:
	mov.f64 	%fd64, %fd65;
	setp.lt.u32	%p16, %r9, 8;
	@%p16 bra 	BB15_29;

	ld.volatile.shared.f64 	%fd39, [%rd1+32];
	add.f64 	%fd64, %fd64, %fd39;
	st.volatile.shared.f64 	[%rd1], %fd64;

BB15_29:
	mov.f64 	%fd63, %fd64;
	setp.lt.u32	%p17, %r9, 4;
	@%p17 bra 	BB15_31;

	ld.volatile.shared.f64 	%fd40, [%rd1+16];
	add.f64 	%fd63, %fd63, %fd40;
	st.volatile.shared.f64 	[%rd1], %fd63;

BB15_31:
	setp.lt.u32	%p18, %r9, 2;
	@%p18 bra 	BB15_33;

	ld.volatile.shared.f64 	%fd41, [%rd1+8];
	add.f64 	%fd42, %fd63, %fd41;
	st.volatile.shared.f64 	[%rd1], %fd42;

BB15_33:
	setp.ne.s32	%p19, %r6, 0;
	@%p19 bra 	BB15_35;

	ld.shared.f64 	%fd43, [sdata];
	cvta.to.global.u64 	%rd12, %rd3;
	mul.wide.u32 	%rd13, %r7, 8;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f64 	[%rd14], %fd43;

BB15_35:
	ret;
}

	// .globl	reduce_row_sum
.visible .entry reduce_row_sum(
	.param .u64 reduce_row_sum_param_0,
	.param .u64 reduce_row_sum_param_1,
	.param .u32 reduce_row_sum_param_2,
	.param .u32 reduce_row_sum_param_3
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<39>;
	.reg .f64 	%fd<74>;
	.reg .b64 	%rd<42>;


	ld.param.u64 	%rd1, [reduce_row_sum_param_0];
	ld.param.u64 	%rd2, [reduce_row_sum_param_1];
	ld.param.u32 	%r5, [reduce_row_sum_param_2];
	ld.param.u32 	%r4, [reduce_row_sum_param_3];
	mov.u32 	%r6, %ctaid.x;
	setp.ge.u32	%p1, %r6, %r5;
	@%p1 bra 	BB16_35;

	mov.u32 	%r38, %tid.x;
	mov.f64 	%fd72, 0d0000000000000000;
	mov.f64 	%fd73, %fd72;
	setp.ge.u32	%p2, %r38, %r4;
	@%p2 bra 	BB16_4;

	cvta.to.global.u64 	%rd3, %rd1;

BB16_3:
	mad.lo.s32 	%r8, %r6, %r4, %r38;
	mul.wide.u32 	%rd4, %r8, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd28, [%rd5];
	add.f64 	%fd73, %fd73, %fd28;
	mov.u32 	%r9, %ntid.x;
	add.s32 	%r38, %r9, %r38;
	setp.lt.u32	%p3, %r38, %r4;
	mov.f64 	%fd72, %fd73;
	@%p3 bra 	BB16_3;

BB16_4:
	mov.f64 	%fd70, %fd72;
	mov.u32 	%r10, %tid.x;
	mul.wide.u32 	%rd6, %r10, 8;
	mov.u64 	%rd7, sdata;
	add.s64 	%rd8, %rd7, %rd6;
	st.shared.f64 	[%rd8], %fd70;
	bar.sync 	0;
	mov.u32 	%r11, %ntid.x;
	setp.lt.u32	%p4, %r11, 1024;
	@%p4 bra 	BB16_8;

	setp.gt.u32	%p5, %r10, 511;
	mov.f64 	%fd71, %fd70;
	@%p5 bra 	BB16_7;

	ld.shared.f64 	%fd29, [%rd8+4096];
	add.f64 	%fd71, %fd70, %fd29;
	st.shared.f64 	[%rd8], %fd71;

BB16_7:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB16_8:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p6, %r11, 512;
	@%p6 bra 	BB16_12;

	setp.gt.u32	%p7, %r10, 255;
	mov.f64 	%fd69, %fd68;
	@%p7 bra 	BB16_11;

	ld.shared.f64 	%fd30, [%rd8+2048];
	add.f64 	%fd69, %fd68, %fd30;
	st.shared.f64 	[%rd8], %fd69;

BB16_11:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB16_12:
	mov.f64 	%fd66, %fd68;
	setp.lt.u32	%p8, %r11, 256;
	@%p8 bra 	BB16_16;

	setp.gt.u32	%p9, %r10, 127;
	mov.f64 	%fd67, %fd66;
	@%p9 bra 	BB16_15;

	ld.shared.f64 	%fd31, [%rd8+1024];
	add.f64 	%fd67, %fd66, %fd31;
	st.shared.f64 	[%rd8], %fd67;

BB16_15:
	mov.f64 	%fd66, %fd67;
	bar.sync 	0;

BB16_16:
	mov.f64 	%fd64, %fd66;
	setp.lt.u32	%p10, %r11, 128;
	@%p10 bra 	BB16_20;

	setp.gt.u32	%p11, %r10, 63;
	mov.f64 	%fd65, %fd64;
	@%p11 bra 	BB16_19;

	ld.shared.f64 	%fd32, [%rd8+512];
	add.f64 	%fd65, %fd64, %fd32;
	st.shared.f64 	[%rd8], %fd65;

BB16_19:
	mov.f64 	%fd64, %fd65;
	bar.sync 	0;

BB16_20:
	mov.f64 	%fd63, %fd64;
	setp.gt.u32	%p12, %r10, 31;
	@%p12 bra 	BB16_33;

	setp.lt.u32	%p13, %r11, 64;
	@%p13 bra 	BB16_23;

	ld.volatile.shared.f64 	%fd33, [%rd8+256];
	add.f64 	%fd63, %fd63, %fd33;
	st.volatile.shared.f64 	[%rd8], %fd63;

BB16_23:
	mov.f64 	%fd62, %fd63;
	setp.lt.u32	%p14, %r11, 32;
	@%p14 bra 	BB16_25;

	ld.volatile.shared.f64 	%fd34, [%rd8+128];
	add.f64 	%fd62, %fd62, %fd34;
	st.volatile.shared.f64 	[%rd8], %fd62;

BB16_25:
	mov.f64 	%fd61, %fd62;
	setp.lt.u32	%p15, %r11, 16;
	@%p15 bra 	BB16_27;

	ld.volatile.shared.f64 	%fd35, [%rd8+64];
	add.f64 	%fd61, %fd61, %fd35;
	st.volatile.shared.f64 	[%rd8], %fd61;

BB16_27:
	mov.f64 	%fd60, %fd61;
	setp.lt.u32	%p16, %r11, 8;
	@%p16 bra 	BB16_29;

	ld.volatile.shared.f64 	%fd36, [%rd8+32];
	add.f64 	%fd60, %fd60, %fd36;
	st.volatile.shared.f64 	[%rd8], %fd60;

BB16_29:
	mov.f64 	%fd59, %fd60;
	setp.lt.u32	%p17, %r11, 4;
	@%p17 bra 	BB16_31;

	ld.volatile.shared.f64 	%fd37, [%rd8+16];
	add.f64 	%fd59, %fd59, %fd37;
	st.volatile.shared.f64 	[%rd8], %fd59;

BB16_31:
	setp.lt.u32	%p18, %r11, 2;
	@%p18 bra 	BB16_33;

	ld.volatile.shared.f64 	%fd38, [%rd8+8];
	add.f64 	%fd39, %fd59, %fd38;
	st.volatile.shared.f64 	[%rd8], %fd39;

BB16_33:
	setp.ne.s32	%p19, %r10, 0;
	@%p19 bra 	BB16_35;

	ld.shared.f64 	%fd40, [sdata];
	cvta.to.global.u64 	%rd39, %rd2;
	mul.wide.u32 	%rd40, %r6, 8;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f64 	[%rd41], %fd40;

BB16_35:
	ret;
}

	// .globl	reduce_col_sum
.visible .entry reduce_col_sum(
	.param .u64 reduce_col_sum_param_0,
	.param .u64 reduce_col_sum_param_1,
	.param .u32 reduce_col_sum_param_2,
	.param .u32 reduce_col_sum_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [reduce_col_sum_param_0];
	ld.param.u64 	%rd3, [reduce_col_sum_param_1];
	ld.param.u32 	%r5, [reduce_col_sum_param_2];
	ld.param.u32 	%r6, [reduce_col_sum_param_3];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.u32	%p1, %r1, %r6;
	@%p1 bra 	BB17_5;

	cvta.to.global.u64 	%rd1, %rd2;
	mul.lo.s32 	%r2, %r6, %r5;
	mov.f64 	%fd8, 0d0000000000000000;
	mov.f64 	%fd9, %fd8;
	setp.ge.u32	%p2, %r1, %r2;
	@%p2 bra 	BB17_4;

	mov.u32 	%r10, %r1;

BB17_3:
	mov.u32 	%r3, %r10;
	mul.wide.u32 	%rd4, %r3, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd6, [%rd5];
	add.f64 	%fd9, %fd9, %fd6;
	add.s32 	%r4, %r3, %r6;
	setp.lt.u32	%p3, %r4, %r2;
	mov.u32 	%r10, %r4;
	mov.f64 	%fd8, %fd9;
	@%p3 bra 	BB17_3;

BB17_4:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f64 	[%rd8], %fd8;

BB17_5:
	ret;
}

	// .globl	reduce_max
.visible .entry reduce_max(
	.param .u64 reduce_max_param_0,
	.param .u64 reduce_max_param_1,
	.param .u32 reduce_max_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<79>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [reduce_max_param_0];
	ld.param.u64 	%rd3, [reduce_max_param_1];
	ld.param.u32 	%r5, [reduce_max_param_2];
	mov.u32 	%r6, %tid.x;
	mov.u32 	%r7, %ctaid.x;
	shl.b32 	%r8, %r7, 1;
	mov.u32 	%r9, %ntid.x;
	mad.lo.s32 	%r32, %r8, %r9, %r6;
	mov.f64 	%fd76, 0dFFEFFFFFFFFFFFFF;
	mov.f64 	%fd77, %fd76;
	setp.ge.u32	%p1, %r32, %r5;
	@%p1 bra 	BB18_4;

BB18_1:
	mov.f64 	%fd1, %fd77;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r32, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd30, [%rd6];
	max.f64 	%fd78, %fd1, %fd30;
	add.s32 	%r3, %r32, %r9;
	setp.ge.u32	%p2, %r3, %r5;
	@%p2 bra 	BB18_3;

	mul.wide.u32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f64 	%fd31, [%rd9];
	max.f64 	%fd78, %fd78, %fd31;

BB18_3:
	mov.f64 	%fd77, %fd78;
	shl.b32 	%r12, %r9, 1;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r32, %r12, %r13, %r32;
	setp.lt.u32	%p3, %r32, %r5;
	mov.f64 	%fd76, %fd77;
	@%p3 bra 	BB18_1;

BB18_4:
	mov.f64 	%fd74, %fd76;
	mul.wide.u32 	%rd10, %r6, 8;
	mov.u64 	%rd11, sdata;
	add.s64 	%rd1, %rd11, %rd10;
	st.shared.f64 	[%rd1], %fd74;
	bar.sync 	0;
	setp.lt.u32	%p4, %r9, 1024;
	@%p4 bra 	BB18_8;

	setp.gt.u32	%p5, %r6, 511;
	mov.f64 	%fd75, %fd74;
	@%p5 bra 	BB18_7;

	ld.shared.f64 	%fd32, [%rd1+4096];
	max.f64 	%fd75, %fd74, %fd32;
	st.shared.f64 	[%rd1], %fd75;

BB18_7:
	mov.f64 	%fd74, %fd75;
	bar.sync 	0;

BB18_8:
	mov.f64 	%fd72, %fd74;
	setp.lt.u32	%p6, %r9, 512;
	@%p6 bra 	BB18_12;

	setp.gt.u32	%p7, %r6, 255;
	mov.f64 	%fd73, %fd72;
	@%p7 bra 	BB18_11;

	ld.shared.f64 	%fd33, [%rd1+2048];
	max.f64 	%fd73, %fd72, %fd33;
	st.shared.f64 	[%rd1], %fd73;

BB18_11:
	mov.f64 	%fd72, %fd73;
	bar.sync 	0;

BB18_12:
	mov.f64 	%fd70, %fd72;
	setp.lt.u32	%p8, %r9, 256;
	@%p8 bra 	BB18_16;

	setp.gt.u32	%p9, %r6, 127;
	mov.f64 	%fd71, %fd70;
	@%p9 bra 	BB18_15;

	ld.shared.f64 	%fd34, [%rd1+1024];
	max.f64 	%fd71, %fd70, %fd34;
	st.shared.f64 	[%rd1], %fd71;

BB18_15:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB18_16:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p10, %r9, 128;
	@%p10 bra 	BB18_20;

	setp.gt.u32	%p11, %r6, 63;
	mov.f64 	%fd69, %fd68;
	@%p11 bra 	BB18_19;

	ld.shared.f64 	%fd35, [%rd1+512];
	max.f64 	%fd69, %fd68, %fd35;
	st.shared.f64 	[%rd1], %fd69;

BB18_19:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB18_20:
	mov.f64 	%fd67, %fd68;
	setp.gt.u32	%p12, %r6, 31;
	@%p12 bra 	BB18_33;

	setp.lt.u32	%p13, %r9, 64;
	@%p13 bra 	BB18_23;

	ld.volatile.shared.f64 	%fd36, [%rd1+256];
	max.f64 	%fd67, %fd67, %fd36;
	st.volatile.shared.f64 	[%rd1], %fd67;

BB18_23:
	mov.f64 	%fd66, %fd67;
	setp.lt.u32	%p14, %r9, 32;
	@%p14 bra 	BB18_25;

	ld.volatile.shared.f64 	%fd37, [%rd1+128];
	max.f64 	%fd66, %fd66, %fd37;
	st.volatile.shared.f64 	[%rd1], %fd66;

BB18_25:
	mov.f64 	%fd65, %fd66;
	setp.lt.u32	%p15, %r9, 16;
	@%p15 bra 	BB18_27;

	ld.volatile.shared.f64 	%fd38, [%rd1+64];
	max.f64 	%fd65, %fd65, %fd38;
	st.volatile.shared.f64 	[%rd1], %fd65;

BB18_27:
	mov.f64 	%fd64, %fd65;
	setp.lt.u32	%p16, %r9, 8;
	@%p16 bra 	BB18_29;

	ld.volatile.shared.f64 	%fd39, [%rd1+32];
	max.f64 	%fd64, %fd64, %fd39;
	st.volatile.shared.f64 	[%rd1], %fd64;

BB18_29:
	mov.f64 	%fd63, %fd64;
	setp.lt.u32	%p17, %r9, 4;
	@%p17 bra 	BB18_31;

	ld.volatile.shared.f64 	%fd40, [%rd1+16];
	max.f64 	%fd63, %fd63, %fd40;
	st.volatile.shared.f64 	[%rd1], %fd63;

BB18_31:
	setp.lt.u32	%p18, %r9, 2;
	@%p18 bra 	BB18_33;

	ld.volatile.shared.f64 	%fd41, [%rd1+8];
	max.f64 	%fd42, %fd63, %fd41;
	st.volatile.shared.f64 	[%rd1], %fd42;

BB18_33:
	setp.ne.s32	%p19, %r6, 0;
	@%p19 bra 	BB18_35;

	ld.shared.f64 	%fd43, [sdata];
	cvta.to.global.u64 	%rd12, %rd3;
	mul.wide.u32 	%rd13, %r7, 8;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f64 	[%rd14], %fd43;

BB18_35:
	ret;
}

	// .globl	reduce_row_max
.visible .entry reduce_row_max(
	.param .u64 reduce_row_max_param_0,
	.param .u64 reduce_row_max_param_1,
	.param .u32 reduce_row_max_param_2,
	.param .u32 reduce_row_max_param_3
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<39>;
	.reg .f64 	%fd<74>;
	.reg .b64 	%rd<42>;


	ld.param.u64 	%rd1, [reduce_row_max_param_0];
	ld.param.u64 	%rd2, [reduce_row_max_param_1];
	ld.param.u32 	%r5, [reduce_row_max_param_2];
	ld.param.u32 	%r4, [reduce_row_max_param_3];
	mov.u32 	%r6, %ctaid.x;
	setp.ge.u32	%p1, %r6, %r5;
	@%p1 bra 	BB19_35;

	mov.u32 	%r38, %tid.x;
	mov.f64 	%fd72, 0dFFEFFFFFFFFFFFFF;
	mov.f64 	%fd73, %fd72;
	setp.ge.u32	%p2, %r38, %r4;
	@%p2 bra 	BB19_4;

	cvta.to.global.u64 	%rd3, %rd1;

BB19_3:
	mad.lo.s32 	%r8, %r6, %r4, %r38;
	mul.wide.u32 	%rd4, %r8, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd28, [%rd5];
	max.f64 	%fd73, %fd73, %fd28;
	mov.u32 	%r9, %ntid.x;
	add.s32 	%r38, %r9, %r38;
	setp.lt.u32	%p3, %r38, %r4;
	mov.f64 	%fd72, %fd73;
	@%p3 bra 	BB19_3;

BB19_4:
	mov.f64 	%fd70, %fd72;
	mov.u32 	%r10, %tid.x;
	mul.wide.u32 	%rd6, %r10, 8;
	mov.u64 	%rd7, sdata;
	add.s64 	%rd8, %rd7, %rd6;
	st.shared.f64 	[%rd8], %fd70;
	bar.sync 	0;
	mov.u32 	%r11, %ntid.x;
	setp.lt.u32	%p4, %r11, 1024;
	@%p4 bra 	BB19_8;

	setp.gt.u32	%p5, %r10, 511;
	mov.f64 	%fd71, %fd70;
	@%p5 bra 	BB19_7;

	ld.shared.f64 	%fd29, [%rd8+4096];
	max.f64 	%fd71, %fd70, %fd29;
	st.shared.f64 	[%rd8], %fd71;

BB19_7:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB19_8:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p6, %r11, 512;
	@%p6 bra 	BB19_12;

	setp.gt.u32	%p7, %r10, 255;
	mov.f64 	%fd69, %fd68;
	@%p7 bra 	BB19_11;

	ld.shared.f64 	%fd30, [%rd8+2048];
	max.f64 	%fd69, %fd68, %fd30;
	st.shared.f64 	[%rd8], %fd69;

BB19_11:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB19_12:
	mov.f64 	%fd66, %fd68;
	setp.lt.u32	%p8, %r11, 256;
	@%p8 bra 	BB19_16;

	setp.gt.u32	%p9, %r10, 127;
	mov.f64 	%fd67, %fd66;
	@%p9 bra 	BB19_15;

	ld.shared.f64 	%fd31, [%rd8+1024];
	max.f64 	%fd67, %fd66, %fd31;
	st.shared.f64 	[%rd8], %fd67;

BB19_15:
	mov.f64 	%fd66, %fd67;
	bar.sync 	0;

BB19_16:
	mov.f64 	%fd64, %fd66;
	setp.lt.u32	%p10, %r11, 128;
	@%p10 bra 	BB19_20;

	setp.gt.u32	%p11, %r10, 63;
	mov.f64 	%fd65, %fd64;
	@%p11 bra 	BB19_19;

	ld.shared.f64 	%fd32, [%rd8+512];
	max.f64 	%fd65, %fd64, %fd32;
	st.shared.f64 	[%rd8], %fd65;

BB19_19:
	mov.f64 	%fd64, %fd65;
	bar.sync 	0;

BB19_20:
	mov.f64 	%fd63, %fd64;
	setp.gt.u32	%p12, %r10, 31;
	@%p12 bra 	BB19_33;

	setp.lt.u32	%p13, %r11, 64;
	@%p13 bra 	BB19_23;

	ld.volatile.shared.f64 	%fd33, [%rd8+256];
	max.f64 	%fd63, %fd63, %fd33;
	st.volatile.shared.f64 	[%rd8], %fd63;

BB19_23:
	mov.f64 	%fd62, %fd63;
	setp.lt.u32	%p14, %r11, 32;
	@%p14 bra 	BB19_25;

	ld.volatile.shared.f64 	%fd34, [%rd8+128];
	max.f64 	%fd62, %fd62, %fd34;
	st.volatile.shared.f64 	[%rd8], %fd62;

BB19_25:
	mov.f64 	%fd61, %fd62;
	setp.lt.u32	%p15, %r11, 16;
	@%p15 bra 	BB19_27;

	ld.volatile.shared.f64 	%fd35, [%rd8+64];
	max.f64 	%fd61, %fd61, %fd35;
	st.volatile.shared.f64 	[%rd8], %fd61;

BB19_27:
	mov.f64 	%fd60, %fd61;
	setp.lt.u32	%p16, %r11, 8;
	@%p16 bra 	BB19_29;

	ld.volatile.shared.f64 	%fd36, [%rd8+32];
	max.f64 	%fd60, %fd60, %fd36;
	st.volatile.shared.f64 	[%rd8], %fd60;

BB19_29:
	mov.f64 	%fd59, %fd60;
	setp.lt.u32	%p17, %r11, 4;
	@%p17 bra 	BB19_31;

	ld.volatile.shared.f64 	%fd37, [%rd8+16];
	max.f64 	%fd59, %fd59, %fd37;
	st.volatile.shared.f64 	[%rd8], %fd59;

BB19_31:
	setp.lt.u32	%p18, %r11, 2;
	@%p18 bra 	BB19_33;

	ld.volatile.shared.f64 	%fd38, [%rd8+8];
	max.f64 	%fd39, %fd59, %fd38;
	st.volatile.shared.f64 	[%rd8], %fd39;

BB19_33:
	setp.ne.s32	%p19, %r10, 0;
	@%p19 bra 	BB19_35;

	ld.shared.f64 	%fd40, [sdata];
	cvta.to.global.u64 	%rd39, %rd2;
	mul.wide.u32 	%rd40, %r6, 8;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f64 	[%rd41], %fd40;

BB19_35:
	ret;
}

	// .globl	reduce_col_max
.visible .entry reduce_col_max(
	.param .u64 reduce_col_max_param_0,
	.param .u64 reduce_col_max_param_1,
	.param .u32 reduce_col_max_param_2,
	.param .u32 reduce_col_max_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [reduce_col_max_param_0];
	ld.param.u64 	%rd3, [reduce_col_max_param_1];
	ld.param.u32 	%r5, [reduce_col_max_param_2];
	ld.param.u32 	%r6, [reduce_col_max_param_3];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.u32	%p1, %r1, %r6;
	@%p1 bra 	BB20_5;

	cvta.to.global.u64 	%rd1, %rd2;
	mul.lo.s32 	%r2, %r6, %r5;
	mov.f64 	%fd8, 0dFFEFFFFFFFFFFFFF;
	mov.f64 	%fd9, %fd8;
	setp.ge.u32	%p2, %r1, %r2;
	@%p2 bra 	BB20_4;

	mov.u32 	%r10, %r1;

BB20_3:
	mov.u32 	%r3, %r10;
	mul.wide.u32 	%rd4, %r3, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd6, [%rd5];
	max.f64 	%fd9, %fd9, %fd6;
	add.s32 	%r4, %r3, %r6;
	setp.lt.u32	%p3, %r4, %r2;
	mov.u32 	%r10, %r4;
	mov.f64 	%fd8, %fd9;
	@%p3 bra 	BB20_3;

BB20_4:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f64 	[%rd8], %fd8;

BB20_5:
	ret;
}

	// .globl	reduce_min
.visible .entry reduce_min(
	.param .u64 reduce_min_param_0,
	.param .u64 reduce_min_param_1,
	.param .u32 reduce_min_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<79>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [reduce_min_param_0];
	ld.param.u64 	%rd3, [reduce_min_param_1];
	ld.param.u32 	%r5, [reduce_min_param_2];
	mov.u32 	%r6, %tid.x;
	mov.u32 	%r7, %ctaid.x;
	shl.b32 	%r8, %r7, 1;
	mov.u32 	%r9, %ntid.x;
	mad.lo.s32 	%r32, %r8, %r9, %r6;
	mov.f64 	%fd76, 0d7FEFFFFFFFFFFFFF;
	mov.f64 	%fd77, %fd76;
	setp.ge.u32	%p1, %r32, %r5;
	@%p1 bra 	BB21_4;

BB21_1:
	mov.f64 	%fd1, %fd77;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r32, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd30, [%rd6];
	min.f64 	%fd78, %fd1, %fd30;
	add.s32 	%r3, %r32, %r9;
	setp.ge.u32	%p2, %r3, %r5;
	@%p2 bra 	BB21_3;

	mul.wide.u32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f64 	%fd31, [%rd9];
	min.f64 	%fd78, %fd78, %fd31;

BB21_3:
	mov.f64 	%fd77, %fd78;
	shl.b32 	%r12, %r9, 1;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r32, %r12, %r13, %r32;
	setp.lt.u32	%p3, %r32, %r5;
	mov.f64 	%fd76, %fd77;
	@%p3 bra 	BB21_1;

BB21_4:
	mov.f64 	%fd74, %fd76;
	mul.wide.u32 	%rd10, %r6, 8;
	mov.u64 	%rd11, sdata;
	add.s64 	%rd1, %rd11, %rd10;
	st.shared.f64 	[%rd1], %fd74;
	bar.sync 	0;
	setp.lt.u32	%p4, %r9, 1024;
	@%p4 bra 	BB21_8;

	setp.gt.u32	%p5, %r6, 511;
	mov.f64 	%fd75, %fd74;
	@%p5 bra 	BB21_7;

	ld.shared.f64 	%fd32, [%rd1+4096];
	min.f64 	%fd75, %fd74, %fd32;
	st.shared.f64 	[%rd1], %fd75;

BB21_7:
	mov.f64 	%fd74, %fd75;
	bar.sync 	0;

BB21_8:
	mov.f64 	%fd72, %fd74;
	setp.lt.u32	%p6, %r9, 512;
	@%p6 bra 	BB21_12;

	setp.gt.u32	%p7, %r6, 255;
	mov.f64 	%fd73, %fd72;
	@%p7 bra 	BB21_11;

	ld.shared.f64 	%fd33, [%rd1+2048];
	min.f64 	%fd73, %fd72, %fd33;
	st.shared.f64 	[%rd1], %fd73;

BB21_11:
	mov.f64 	%fd72, %fd73;
	bar.sync 	0;

BB21_12:
	mov.f64 	%fd70, %fd72;
	setp.lt.u32	%p8, %r9, 256;
	@%p8 bra 	BB21_16;

	setp.gt.u32	%p9, %r6, 127;
	mov.f64 	%fd71, %fd70;
	@%p9 bra 	BB21_15;

	ld.shared.f64 	%fd34, [%rd1+1024];
	min.f64 	%fd71, %fd70, %fd34;
	st.shared.f64 	[%rd1], %fd71;

BB21_15:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB21_16:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p10, %r9, 128;
	@%p10 bra 	BB21_20;

	setp.gt.u32	%p11, %r6, 63;
	mov.f64 	%fd69, %fd68;
	@%p11 bra 	BB21_19;

	ld.shared.f64 	%fd35, [%rd1+512];
	min.f64 	%fd69, %fd68, %fd35;
	st.shared.f64 	[%rd1], %fd69;

BB21_19:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB21_20:
	mov.f64 	%fd67, %fd68;
	setp.gt.u32	%p12, %r6, 31;
	@%p12 bra 	BB21_33;

	setp.lt.u32	%p13, %r9, 64;
	@%p13 bra 	BB21_23;

	ld.volatile.shared.f64 	%fd36, [%rd1+256];
	min.f64 	%fd67, %fd67, %fd36;
	st.volatile.shared.f64 	[%rd1], %fd67;

BB21_23:
	mov.f64 	%fd66, %fd67;
	setp.lt.u32	%p14, %r9, 32;
	@%p14 bra 	BB21_25;

	ld.volatile.shared.f64 	%fd37, [%rd1+128];
	min.f64 	%fd66, %fd66, %fd37;
	st.volatile.shared.f64 	[%rd1], %fd66;

BB21_25:
	mov.f64 	%fd65, %fd66;
	setp.lt.u32	%p15, %r9, 16;
	@%p15 bra 	BB21_27;

	ld.volatile.shared.f64 	%fd38, [%rd1+64];
	min.f64 	%fd65, %fd65, %fd38;
	st.volatile.shared.f64 	[%rd1], %fd65;

BB21_27:
	mov.f64 	%fd64, %fd65;
	setp.lt.u32	%p16, %r9, 8;
	@%p16 bra 	BB21_29;

	ld.volatile.shared.f64 	%fd39, [%rd1+32];
	min.f64 	%fd64, %fd64, %fd39;
	st.volatile.shared.f64 	[%rd1], %fd64;

BB21_29:
	mov.f64 	%fd63, %fd64;
	setp.lt.u32	%p17, %r9, 4;
	@%p17 bra 	BB21_31;

	ld.volatile.shared.f64 	%fd40, [%rd1+16];
	min.f64 	%fd63, %fd63, %fd40;
	st.volatile.shared.f64 	[%rd1], %fd63;

BB21_31:
	setp.lt.u32	%p18, %r9, 2;
	@%p18 bra 	BB21_33;

	ld.volatile.shared.f64 	%fd41, [%rd1+8];
	min.f64 	%fd42, %fd63, %fd41;
	st.volatile.shared.f64 	[%rd1], %fd42;

BB21_33:
	setp.ne.s32	%p19, %r6, 0;
	@%p19 bra 	BB21_35;

	ld.shared.f64 	%fd43, [sdata];
	cvta.to.global.u64 	%rd12, %rd3;
	mul.wide.u32 	%rd13, %r7, 8;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f64 	[%rd14], %fd43;

BB21_35:
	ret;
}

	// .globl	reduce_row_min
.visible .entry reduce_row_min(
	.param .u64 reduce_row_min_param_0,
	.param .u64 reduce_row_min_param_1,
	.param .u32 reduce_row_min_param_2,
	.param .u32 reduce_row_min_param_3
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<39>;
	.reg .f64 	%fd<74>;
	.reg .b64 	%rd<42>;


	ld.param.u64 	%rd1, [reduce_row_min_param_0];
	ld.param.u64 	%rd2, [reduce_row_min_param_1];
	ld.param.u32 	%r5, [reduce_row_min_param_2];
	ld.param.u32 	%r4, [reduce_row_min_param_3];
	mov.u32 	%r6, %ctaid.x;
	setp.ge.u32	%p1, %r6, %r5;
	@%p1 bra 	BB22_35;

	mov.u32 	%r38, %tid.x;
	mov.f64 	%fd72, 0d7FEFFFFFFFFFFFFF;
	mov.f64 	%fd73, %fd72;
	setp.ge.u32	%p2, %r38, %r4;
	@%p2 bra 	BB22_4;

	cvta.to.global.u64 	%rd3, %rd1;

BB22_3:
	mad.lo.s32 	%r8, %r6, %r4, %r38;
	mul.wide.u32 	%rd4, %r8, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd28, [%rd5];
	min.f64 	%fd73, %fd73, %fd28;
	mov.u32 	%r9, %ntid.x;
	add.s32 	%r38, %r9, %r38;
	setp.lt.u32	%p3, %r38, %r4;
	mov.f64 	%fd72, %fd73;
	@%p3 bra 	BB22_3;

BB22_4:
	mov.f64 	%fd70, %fd72;
	mov.u32 	%r10, %tid.x;
	mul.wide.u32 	%rd6, %r10, 8;
	mov.u64 	%rd7, sdata;
	add.s64 	%rd8, %rd7, %rd6;
	st.shared.f64 	[%rd8], %fd70;
	bar.sync 	0;
	mov.u32 	%r11, %ntid.x;
	setp.lt.u32	%p4, %r11, 1024;
	@%p4 bra 	BB22_8;

	setp.gt.u32	%p5, %r10, 511;
	mov.f64 	%fd71, %fd70;
	@%p5 bra 	BB22_7;

	ld.shared.f64 	%fd29, [%rd8+4096];
	min.f64 	%fd71, %fd70, %fd29;
	st.shared.f64 	[%rd8], %fd71;

BB22_7:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB22_8:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p6, %r11, 512;
	@%p6 bra 	BB22_12;

	setp.gt.u32	%p7, %r10, 255;
	mov.f64 	%fd69, %fd68;
	@%p7 bra 	BB22_11;

	ld.shared.f64 	%fd30, [%rd8+2048];
	min.f64 	%fd69, %fd68, %fd30;
	st.shared.f64 	[%rd8], %fd69;

BB22_11:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB22_12:
	mov.f64 	%fd66, %fd68;
	setp.lt.u32	%p8, %r11, 256;
	@%p8 bra 	BB22_16;

	setp.gt.u32	%p9, %r10, 127;
	mov.f64 	%fd67, %fd66;
	@%p9 bra 	BB22_15;

	ld.shared.f64 	%fd31, [%rd8+1024];
	min.f64 	%fd67, %fd66, %fd31;
	st.shared.f64 	[%rd8], %fd67;

BB22_15:
	mov.f64 	%fd66, %fd67;
	bar.sync 	0;

BB22_16:
	mov.f64 	%fd64, %fd66;
	setp.lt.u32	%p10, %r11, 128;
	@%p10 bra 	BB22_20;

	setp.gt.u32	%p11, %r10, 63;
	mov.f64 	%fd65, %fd64;
	@%p11 bra 	BB22_19;

	ld.shared.f64 	%fd32, [%rd8+512];
	min.f64 	%fd65, %fd64, %fd32;
	st.shared.f64 	[%rd8], %fd65;

BB22_19:
	mov.f64 	%fd64, %fd65;
	bar.sync 	0;

BB22_20:
	mov.f64 	%fd63, %fd64;
	setp.gt.u32	%p12, %r10, 31;
	@%p12 bra 	BB22_33;

	setp.lt.u32	%p13, %r11, 64;
	@%p13 bra 	BB22_23;

	ld.volatile.shared.f64 	%fd33, [%rd8+256];
	min.f64 	%fd63, %fd63, %fd33;
	st.volatile.shared.f64 	[%rd8], %fd63;

BB22_23:
	mov.f64 	%fd62, %fd63;
	setp.lt.u32	%p14, %r11, 32;
	@%p14 bra 	BB22_25;

	ld.volatile.shared.f64 	%fd34, [%rd8+128];
	min.f64 	%fd62, %fd62, %fd34;
	st.volatile.shared.f64 	[%rd8], %fd62;

BB22_25:
	mov.f64 	%fd61, %fd62;
	setp.lt.u32	%p15, %r11, 16;
	@%p15 bra 	BB22_27;

	ld.volatile.shared.f64 	%fd35, [%rd8+64];
	min.f64 	%fd61, %fd61, %fd35;
	st.volatile.shared.f64 	[%rd8], %fd61;

BB22_27:
	mov.f64 	%fd60, %fd61;
	setp.lt.u32	%p16, %r11, 8;
	@%p16 bra 	BB22_29;

	ld.volatile.shared.f64 	%fd36, [%rd8+32];
	min.f64 	%fd60, %fd60, %fd36;
	st.volatile.shared.f64 	[%rd8], %fd60;

BB22_29:
	mov.f64 	%fd59, %fd60;
	setp.lt.u32	%p17, %r11, 4;
	@%p17 bra 	BB22_31;

	ld.volatile.shared.f64 	%fd37, [%rd8+16];
	min.f64 	%fd59, %fd59, %fd37;
	st.volatile.shared.f64 	[%rd8], %fd59;

BB22_31:
	setp.lt.u32	%p18, %r11, 2;
	@%p18 bra 	BB22_33;

	ld.volatile.shared.f64 	%fd38, [%rd8+8];
	min.f64 	%fd39, %fd59, %fd38;
	st.volatile.shared.f64 	[%rd8], %fd39;

BB22_33:
	setp.ne.s32	%p19, %r10, 0;
	@%p19 bra 	BB22_35;

	ld.shared.f64 	%fd40, [sdata];
	cvta.to.global.u64 	%rd39, %rd2;
	mul.wide.u32 	%rd40, %r6, 8;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f64 	[%rd41], %fd40;

BB22_35:
	ret;
}

	// .globl	reduce_col_min
.visible .entry reduce_col_min(
	.param .u64 reduce_col_min_param_0,
	.param .u64 reduce_col_min_param_1,
	.param .u32 reduce_col_min_param_2,
	.param .u32 reduce_col_min_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [reduce_col_min_param_0];
	ld.param.u64 	%rd3, [reduce_col_min_param_1];
	ld.param.u32 	%r5, [reduce_col_min_param_2];
	ld.param.u32 	%r6, [reduce_col_min_param_3];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.u32	%p1, %r1, %r6;
	@%p1 bra 	BB23_5;

	cvta.to.global.u64 	%rd1, %rd2;
	mul.lo.s32 	%r2, %r6, %r5;
	mov.f64 	%fd8, 0d7FEFFFFFFFFFFFFF;
	mov.f64 	%fd9, %fd8;
	setp.ge.u32	%p2, %r1, %r2;
	@%p2 bra 	BB23_4;

	mov.u32 	%r10, %r1;

BB23_3:
	mov.u32 	%r3, %r10;
	mul.wide.u32 	%rd4, %r3, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd6, [%rd5];
	min.f64 	%fd9, %fd9, %fd6;
	add.s32 	%r4, %r3, %r6;
	setp.lt.u32	%p3, %r4, %r2;
	mov.u32 	%r10, %r4;
	mov.f64 	%fd8, %fd9;
	@%p3 bra 	BB23_3;

BB23_4:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f64 	[%rd8], %fd8;

BB23_5:
	ret;
}

	// .globl	reduce_prod
.visible .entry reduce_prod(
	.param .u64 reduce_prod_param_0,
	.param .u64 reduce_prod_param_1,
	.param .u32 reduce_prod_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<79>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [reduce_prod_param_0];
	ld.param.u64 	%rd3, [reduce_prod_param_1];
	ld.param.u32 	%r5, [reduce_prod_param_2];
	mov.u32 	%r6, %tid.x;
	mov.u32 	%r7, %ctaid.x;
	shl.b32 	%r8, %r7, 1;
	mov.u32 	%r9, %ntid.x;
	mad.lo.s32 	%r32, %r8, %r9, %r6;
	mov.f64 	%fd76, 0d3FF0000000000000;
	mov.f64 	%fd77, %fd76;
	setp.ge.u32	%p1, %r32, %r5;
	@%p1 bra 	BB24_4;

BB24_1:
	mov.f64 	%fd1, %fd77;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r32, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd30, [%rd6];
	mul.f64 	%fd78, %fd1, %fd30;
	add.s32 	%r3, %r32, %r9;
	setp.ge.u32	%p2, %r3, %r5;
	@%p2 bra 	BB24_3;

	mul.wide.u32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f64 	%fd31, [%rd9];
	mul.f64 	%fd78, %fd78, %fd31;

BB24_3:
	mov.f64 	%fd77, %fd78;
	shl.b32 	%r12, %r9, 1;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r32, %r12, %r13, %r32;
	setp.lt.u32	%p3, %r32, %r5;
	mov.f64 	%fd76, %fd77;
	@%p3 bra 	BB24_1;

BB24_4:
	mov.f64 	%fd74, %fd76;
	mul.wide.u32 	%rd10, %r6, 8;
	mov.u64 	%rd11, sdata;
	add.s64 	%rd1, %rd11, %rd10;
	st.shared.f64 	[%rd1], %fd74;
	bar.sync 	0;
	setp.lt.u32	%p4, %r9, 1024;
	@%p4 bra 	BB24_8;

	setp.gt.u32	%p5, %r6, 511;
	mov.f64 	%fd75, %fd74;
	@%p5 bra 	BB24_7;

	ld.shared.f64 	%fd32, [%rd1+4096];
	mul.f64 	%fd75, %fd74, %fd32;
	st.shared.f64 	[%rd1], %fd75;

BB24_7:
	mov.f64 	%fd74, %fd75;
	bar.sync 	0;

BB24_8:
	mov.f64 	%fd72, %fd74;
	setp.lt.u32	%p6, %r9, 512;
	@%p6 bra 	BB24_12;

	setp.gt.u32	%p7, %r6, 255;
	mov.f64 	%fd73, %fd72;
	@%p7 bra 	BB24_11;

	ld.shared.f64 	%fd33, [%rd1+2048];
	mul.f64 	%fd73, %fd72, %fd33;
	st.shared.f64 	[%rd1], %fd73;

BB24_11:
	mov.f64 	%fd72, %fd73;
	bar.sync 	0;

BB24_12:
	mov.f64 	%fd70, %fd72;
	setp.lt.u32	%p8, %r9, 256;
	@%p8 bra 	BB24_16;

	setp.gt.u32	%p9, %r6, 127;
	mov.f64 	%fd71, %fd70;
	@%p9 bra 	BB24_15;

	ld.shared.f64 	%fd34, [%rd1+1024];
	mul.f64 	%fd71, %fd70, %fd34;
	st.shared.f64 	[%rd1], %fd71;

BB24_15:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB24_16:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p10, %r9, 128;
	@%p10 bra 	BB24_20;

	setp.gt.u32	%p11, %r6, 63;
	mov.f64 	%fd69, %fd68;
	@%p11 bra 	BB24_19;

	ld.shared.f64 	%fd35, [%rd1+512];
	mul.f64 	%fd69, %fd68, %fd35;
	st.shared.f64 	[%rd1], %fd69;

BB24_19:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB24_20:
	mov.f64 	%fd67, %fd68;
	setp.gt.u32	%p12, %r6, 31;
	@%p12 bra 	BB24_33;

	setp.lt.u32	%p13, %r9, 64;
	@%p13 bra 	BB24_23;

	ld.volatile.shared.f64 	%fd36, [%rd1+256];
	mul.f64 	%fd67, %fd67, %fd36;
	st.volatile.shared.f64 	[%rd1], %fd67;

BB24_23:
	mov.f64 	%fd66, %fd67;
	setp.lt.u32	%p14, %r9, 32;
	@%p14 bra 	BB24_25;

	ld.volatile.shared.f64 	%fd37, [%rd1+128];
	mul.f64 	%fd66, %fd66, %fd37;
	st.volatile.shared.f64 	[%rd1], %fd66;

BB24_25:
	mov.f64 	%fd65, %fd66;
	setp.lt.u32	%p15, %r9, 16;
	@%p15 bra 	BB24_27;

	ld.volatile.shared.f64 	%fd38, [%rd1+64];
	mul.f64 	%fd65, %fd65, %fd38;
	st.volatile.shared.f64 	[%rd1], %fd65;

BB24_27:
	mov.f64 	%fd64, %fd65;
	setp.lt.u32	%p16, %r9, 8;
	@%p16 bra 	BB24_29;

	ld.volatile.shared.f64 	%fd39, [%rd1+32];
	mul.f64 	%fd64, %fd64, %fd39;
	st.volatile.shared.f64 	[%rd1], %fd64;

BB24_29:
	mov.f64 	%fd63, %fd64;
	setp.lt.u32	%p17, %r9, 4;
	@%p17 bra 	BB24_31;

	ld.volatile.shared.f64 	%fd40, [%rd1+16];
	mul.f64 	%fd63, %fd63, %fd40;
	st.volatile.shared.f64 	[%rd1], %fd63;

BB24_31:
	setp.lt.u32	%p18, %r9, 2;
	@%p18 bra 	BB24_33;

	ld.volatile.shared.f64 	%fd41, [%rd1+8];
	mul.f64 	%fd42, %fd63, %fd41;
	st.volatile.shared.f64 	[%rd1], %fd42;

BB24_33:
	setp.ne.s32	%p19, %r6, 0;
	@%p19 bra 	BB24_35;

	ld.shared.f64 	%fd43, [sdata];
	cvta.to.global.u64 	%rd12, %rd3;
	mul.wide.u32 	%rd13, %r7, 8;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f64 	[%rd14], %fd43;

BB24_35:
	ret;
}

	// .globl	reduce_row_mean
.visible .entry reduce_row_mean(
	.param .u64 reduce_row_mean_param_0,
	.param .u64 reduce_row_mean_param_1,
	.param .u32 reduce_row_mean_param_2,
	.param .u32 reduce_row_mean_param_3
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<39>;
	.reg .f64 	%fd<76>;
	.reg .b64 	%rd<43>;


	ld.param.u64 	%rd1, [reduce_row_mean_param_0];
	ld.param.u64 	%rd2, [reduce_row_mean_param_1];
	ld.param.u32 	%r5, [reduce_row_mean_param_2];
	ld.param.u32 	%r4, [reduce_row_mean_param_3];
	mov.u32 	%r6, %ctaid.x;
	setp.ge.u32	%p1, %r6, %r5;
	@%p1 bra 	BB25_35;

	mov.u32 	%r38, %tid.x;
	mov.f64 	%fd74, 0d0000000000000000;
	mov.f64 	%fd75, %fd74;
	setp.ge.u32	%p2, %r38, %r4;
	@%p2 bra 	BB25_4;

	cvta.to.global.u64 	%rd3, %rd1;

BB25_3:
	mad.lo.s32 	%r8, %r6, %r4, %r38;
	mul.wide.u32 	%rd4, %r8, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd28, [%rd5];
	add.f64 	%fd75, %fd75, %fd28;
	mov.u32 	%r9, %ntid.x;
	add.s32 	%r38, %r9, %r38;
	setp.lt.u32	%p3, %r38, %r4;
	mov.f64 	%fd74, %fd75;
	@%p3 bra 	BB25_3;

BB25_4:
	mov.f64 	%fd72, %fd74;
	mov.u32 	%r10, %tid.x;
	mul.wide.u32 	%rd6, %r10, 8;
	mov.u64 	%rd7, sdata;
	add.s64 	%rd8, %rd7, %rd6;
	st.shared.f64 	[%rd8], %fd72;
	bar.sync 	0;
	mov.u32 	%r11, %ntid.x;
	setp.lt.u32	%p4, %r11, 1024;
	@%p4 bra 	BB25_8;

	setp.gt.u32	%p5, %r10, 511;
	mov.f64 	%fd73, %fd72;
	@%p5 bra 	BB25_7;

	ld.shared.f64 	%fd29, [%rd8+4096];
	add.f64 	%fd73, %fd72, %fd29;
	st.shared.f64 	[%rd8], %fd73;

BB25_7:
	mov.f64 	%fd72, %fd73;
	bar.sync 	0;

BB25_8:
	mov.f64 	%fd70, %fd72;
	setp.lt.u32	%p6, %r11, 512;
	@%p6 bra 	BB25_12;

	setp.gt.u32	%p7, %r10, 255;
	mov.f64 	%fd71, %fd70;
	@%p7 bra 	BB25_11;

	ld.shared.f64 	%fd30, [%rd8+2048];
	add.f64 	%fd71, %fd70, %fd30;
	st.shared.f64 	[%rd8], %fd71;

BB25_11:
	mov.f64 	%fd70, %fd71;
	bar.sync 	0;

BB25_12:
	mov.f64 	%fd68, %fd70;
	setp.lt.u32	%p8, %r11, 256;
	@%p8 bra 	BB25_16;

	setp.gt.u32	%p9, %r10, 127;
	mov.f64 	%fd69, %fd68;
	@%p9 bra 	BB25_15;

	ld.shared.f64 	%fd31, [%rd8+1024];
	add.f64 	%fd69, %fd68, %fd31;
	st.shared.f64 	[%rd8], %fd69;

BB25_15:
	mov.f64 	%fd68, %fd69;
	bar.sync 	0;

BB25_16:
	mov.f64 	%fd66, %fd68;
	setp.lt.u32	%p10, %r11, 128;
	@%p10 bra 	BB25_20;

	setp.gt.u32	%p11, %r10, 63;
	mov.f64 	%fd67, %fd66;
	@%p11 bra 	BB25_19;

	ld.shared.f64 	%fd32, [%rd8+512];
	add.f64 	%fd67, %fd66, %fd32;
	st.shared.f64 	[%rd8], %fd67;

BB25_19:
	mov.f64 	%fd66, %fd67;
	bar.sync 	0;

BB25_20:
	mov.f64 	%fd65, %fd66;
	setp.gt.u32	%p12, %r10, 31;
	@%p12 bra 	BB25_33;

	setp.lt.u32	%p13, %r11, 64;
	@%p13 bra 	BB25_23;

	ld.volatile.shared.f64 	%fd33, [%rd8+256];
	add.f64 	%fd65, %fd65, %fd33;
	st.volatile.shared.f64 	[%rd8], %fd65;

BB25_23:
	mov.f64 	%fd64, %fd65;
	setp.lt.u32	%p14, %r11, 32;
	@%p14 bra 	BB25_25;

	ld.volatile.shared.f64 	%fd34, [%rd8+128];
	add.f64 	%fd64, %fd64, %fd34;
	st.volatile.shared.f64 	[%rd8], %fd64;

BB25_25:
	mov.f64 	%fd63, %fd64;
	setp.lt.u32	%p15, %r11, 16;
	@%p15 bra 	BB25_27;

	ld.volatile.shared.f64 	%fd35, [%rd8+64];
	add.f64 	%fd63, %fd63, %fd35;
	st.volatile.shared.f64 	[%rd8], %fd63;

BB25_27:
	mov.f64 	%fd62, %fd63;
	setp.lt.u32	%p16, %r11, 8;
	@%p16 bra 	BB25_29;

	ld.volatile.shared.f64 	%fd36, [%rd8+32];
	add.f64 	%fd62, %fd62, %fd36;
	st.volatile.shared.f64 	[%rd8], %fd62;

BB25_29:
	mov.f64 	%fd61, %fd62;
	setp.lt.u32	%p17, %r11, 4;
	@%p17 bra 	BB25_31;

	ld.volatile.shared.f64 	%fd37, [%rd8+16];
	add.f64 	%fd61, %fd61, %fd37;
	st.volatile.shared.f64 	[%rd8], %fd61;

BB25_31:
	setp.lt.u32	%p18, %r11, 2;
	@%p18 bra 	BB25_33;

	ld.volatile.shared.f64 	%fd38, [%rd8+8];
	add.f64 	%fd39, %fd61, %fd38;
	st.volatile.shared.f64 	[%rd8], %fd39;

BB25_33:
	setp.ne.s32	%p19, %r10, 0;
	@%p19 bra 	BB25_35;

	ld.shared.f64 	%fd40, [sdata];
	cvt.u64.u32	%rd39, %r4;
	cvt.rn.f64.s64	%fd41, %rd39;
	div.rn.f64 	%fd42, %fd40, %fd41;
	cvta.to.global.u64 	%rd40, %rd2;
	mul.wide.u32 	%rd41, %r6, 8;
	add.s64 	%rd42, %rd40, %rd41;
	st.global.f64 	[%rd42], %fd42;

BB25_35:
	ret;
}

	// .globl	reduce_col_mean
.visible .entry reduce_col_mean(
	.param .u64 reduce_col_mean_param_0,
	.param .u64 reduce_col_mean_param_1,
	.param .u32 reduce_col_mean_param_2,
	.param .u32 reduce_col_mean_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<12>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [reduce_col_mean_param_0];
	ld.param.u64 	%rd3, [reduce_col_mean_param_1];
	ld.param.u32 	%r5, [reduce_col_mean_param_2];
	ld.param.u32 	%r6, [reduce_col_mean_param_3];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.u32	%p1, %r1, %r6;
	@%p1 bra 	BB26_5;

	cvta.to.global.u64 	%rd1, %rd2;
	mul.lo.s32 	%r2, %r6, %r5;
	mov.f64 	%fd10, 0d0000000000000000;
	mov.f64 	%fd11, %fd10;
	setp.ge.u32	%p2, %r1, %r2;
	@%p2 bra 	BB26_4;

	mov.u32 	%r10, %r1;

BB26_3:
	mov.u32 	%r3, %r10;
	mul.wide.u32 	%rd4, %r3, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd6, [%rd5];
	add.f64 	%fd11, %fd11, %fd6;
	add.s32 	%r4, %r3, %r6;
	setp.lt.u32	%p3, %r4, %r2;
	mov.u32 	%r10, %r4;
	mov.f64 	%fd10, %fd11;
	@%p3 bra 	BB26_3;

BB26_4:
	cvta.to.global.u64 	%rd6, %rd3;
	cvt.u64.u32	%rd7, %r5;
	cvt.rn.f64.s64	%fd7, %rd7;
	div.rn.f64 	%fd8, %fd10, %fd7;
	mul.wide.u32 	%rd8, %r1, 8;
	add.s64 	%rd9, %rd6, %rd8;
	st.global.f64 	[%rd9], %fd8;

BB26_5:
	ret;
}

	// .globl	matrix_exp
.visible .entry matrix_exp(
	.param .u64 matrix_exp_param_0,
	.param .u64 matrix_exp_param_1,
	.param .u32 matrix_exp_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<21>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [matrix_exp_param_0];
	ld.param.u64 	%rd3, [matrix_exp_param_1];
	ld.param.u32 	%r5, [matrix_exp_param_2];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r7, %r6, %r8;
	setp.ge.u32	%p1, %r1, %r5;
	@%p1 bra 	BB27_5;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	mov.f64 	%fd6, 0d4338000000000000;
	mov.f64 	%fd7, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd8, %fd1, %fd7, %fd6;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r2, %temp}, %fd8;
	}
	mov.f64 	%fd9, 0dC338000000000000;
	add.rn.f64 	%fd10, %fd8, %fd9;
	mov.f64 	%fd11, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd12, %fd10, %fd11, %fd1;
	mov.f64 	%fd13, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd14, %fd10, %fd13, %fd12;
	mov.f64 	%fd15, 0d3E928AF3FCA213EA;
	mov.f64 	%fd16, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd17, %fd16, %fd14, %fd15;
	mov.f64 	%fd18, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd19, %fd17, %fd14, %fd18;
	mov.f64 	%fd20, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd21, %fd19, %fd14, %fd20;
	mov.f64 	%fd22, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd23, %fd21, %fd14, %fd22;
	mov.f64 	%fd24, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd25, %fd23, %fd14, %fd24;
	mov.f64 	%fd26, 0d3F81111111122322;
	fma.rn.f64 	%fd27, %fd25, %fd14, %fd26;
	mov.f64 	%fd28, 0d3FA55555555502A1;
	fma.rn.f64 	%fd29, %fd27, %fd14, %fd28;
	mov.f64 	%fd30, 0d3FC5555555555511;
	fma.rn.f64 	%fd31, %fd29, %fd14, %fd30;
	mov.f64 	%fd32, 0d3FE000000000000B;
	fma.rn.f64 	%fd33, %fd31, %fd14, %fd32;
	mov.f64 	%fd34, 0d3FF0000000000000;
	fma.rn.f64 	%fd35, %fd33, %fd14, %fd34;
	fma.rn.f64 	%fd36, %fd35, %fd14, %fd34;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r3, %temp}, %fd36;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r4}, %fd36;
	}
	shl.b32 	%r9, %r2, 20;
	add.s32 	%r10, %r4, %r9;
	mov.b64 	%fd40, {%r3, %r10};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r11}, %fd1;
	}
	mov.b32 	 %f2, %r11;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p2, %f1, 0f4086232B;
	@%p2 bra 	BB27_4;

	setp.lt.f64	%p3, %fd1, 0d0000000000000000;
	add.f64 	%fd37, %fd1, 0d7FF0000000000000;
	selp.f64	%fd40, 0d0000000000000000, %fd37, %p3;
	setp.geu.f32	%p4, %f1, 0f40874800;
	@%p4 bra 	BB27_4;

	shr.u32 	%r12, %r2, 31;
	add.s32 	%r13, %r2, %r12;
	shr.s32 	%r14, %r13, 1;
	shl.b32 	%r15, %r14, 20;
	add.s32 	%r16, %r15, %r4;
	mov.b64 	%fd38, {%r3, %r16};
	sub.s32 	%r17, %r2, %r14;
	shl.b32 	%r18, %r17, 20;
	add.s32 	%r19, %r18, 1072693248;
	mov.u32 	%r20, 0;
	mov.b64 	%fd39, {%r20, %r19};
	mul.f64 	%fd40, %fd38, %fd39;

BB27_4:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f64 	[%rd9], %fd40;

BB27_5:
	ret;
}

	// .globl	matrix_sqrt
.visible .entry matrix_sqrt(
	.param .u64 matrix_sqrt_param_0,
	.param .u64 matrix_sqrt_param_1,
	.param .u32 matrix_sqrt_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [matrix_sqrt_param_0];
	ld.param.u64 	%rd2, [matrix_sqrt_param_1];
	ld.param.u32 	%r2, [matrix_sqrt_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB28_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	sqrt.rn.f64 	%fd2, %fd1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd2;

BB28_2:
	ret;
}

	// .globl	matrix_round
.visible .entry matrix_round(
	.param .u64 matrix_round_param_0,
	.param .u64 matrix_round_param_1,
	.param .u32 matrix_round_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd2, [matrix_round_param_0];
	ld.param.u64 	%rd3, [matrix_round_param_1];
	ld.param.u32 	%r2, [matrix_round_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB29_4;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd9, [%rd6];
	abs.f64 	%fd2, %fd9;
	setp.ge.f64	%p2, %fd2, 0d4330000000000000;
	@%p2 bra 	BB29_3;

	add.f64 	%fd5, %fd2, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd6, %fd5;
	setp.lt.f64	%p3, %fd2, 0d3FE0000000000000;
	selp.f64	%fd7, 0d0000000000000000, %fd6, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd7;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r7}, %fd7;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd9;
	}
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b64 	%fd9, {%r6, %r10};

BB29_3:
	cvta.to.global.u64 	%rd7, %rd3;
	cvt.rzi.s64.f64	%rd8, %fd9;
	cvt.rn.f64.s64	%fd8, %rd8;
	shl.b64 	%rd9, %rd1, 3;
	add.s64 	%rd10, %rd7, %rd9;
	st.global.f64 	[%rd10], %fd8;

BB29_4:
	ret;
}

	// .globl	matrix_abs
.visible .entry matrix_abs(
	.param .u64 matrix_abs_param_0,
	.param .u64 matrix_abs_param_1,
	.param .u32 matrix_abs_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [matrix_abs_param_0];
	ld.param.u64 	%rd2, [matrix_abs_param_1];
	ld.param.u32 	%r2, [matrix_abs_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB30_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	abs.f64 	%fd2, %fd1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd2;

BB30_2:
	ret;
}

	// .globl	matrix_log
.visible .entry matrix_log(
	.param .u64 matrix_log_param_0,
	.param .u64 matrix_log_param_1,
	.param .u32 matrix_log_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<59>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [matrix_log_param_0];
	ld.param.u64 	%rd3, [matrix_log_param_1];
	ld.param.u32 	%r12, [matrix_log_param_2];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r14, %r13, %r15;
	setp.ge.u32	%p1, %r1, %r12;
	@%p1 bra 	BB31_9;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd56, [%rd6];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r29}, %fd56;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r30, %temp}, %fd56;
	}
	mov.u32 	%r31, -1023;
	setp.gt.s32	%p2, %r29, 1048575;
	@%p2 bra 	BB31_3;

	mul.f64 	%fd56, %fd56, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r29}, %fd56;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r30, %temp}, %fd56;
	}
	mov.u32 	%r31, -1077;

BB31_3:
	add.s32 	%r18, %r29, -1;
	setp.lt.u32	%p3, %r18, 2146435071;
	@%p3 bra 	BB31_5;
	bra.uni 	BB31_4;

BB31_5:
	shr.u32 	%r20, %r29, 20;
	add.s32 	%r32, %r31, %r20;
	and.b32  	%r21, %r29, -2146435073;
	or.b32  	%r22, %r21, 1072693248;
	mov.b64 	%fd57, {%r30, %r22};
	setp.lt.s32	%p5, %r22, 1073127583;
	@%p5 bra 	BB31_7;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r23, %temp}, %fd57;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r24}, %fd57;
	}
	add.s32 	%r25, %r24, -1048576;
	mov.b64 	%fd57, {%r23, %r25};
	add.s32 	%r32, %r32, 1;

BB31_7:
	add.f64 	%fd13, %fd57, 0d3FF0000000000000;
	// inline asm
	rcp.approx.ftz.f64 %fd12,%fd13;
	// inline asm
	neg.f64 	%fd14, %fd13;
	mov.f64 	%fd15, 0d3FF0000000000000;
	fma.rn.f64 	%fd16, %fd14, %fd12, %fd15;
	fma.rn.f64 	%fd17, %fd16, %fd16, %fd16;
	fma.rn.f64 	%fd18, %fd17, %fd12, %fd12;
	add.f64 	%fd19, %fd57, 0dBFF0000000000000;
	mul.f64 	%fd20, %fd19, %fd18;
	fma.rn.f64 	%fd21, %fd19, %fd18, %fd20;
	mul.f64 	%fd22, %fd21, %fd21;
	mov.f64 	%fd23, 0d3ED0EE258B7A8B04;
	mov.f64 	%fd24, 0d3EB1380B3AE80F1E;
	fma.rn.f64 	%fd25, %fd24, %fd22, %fd23;
	mov.f64 	%fd26, 0d3EF3B2669F02676F;
	fma.rn.f64 	%fd27, %fd25, %fd22, %fd26;
	mov.f64 	%fd28, 0d3F1745CBA9AB0956;
	fma.rn.f64 	%fd29, %fd27, %fd22, %fd28;
	mov.f64 	%fd30, 0d3F3C71C72D1B5154;
	fma.rn.f64 	%fd31, %fd29, %fd22, %fd30;
	mov.f64 	%fd32, 0d3F624924923BE72D;
	fma.rn.f64 	%fd33, %fd31, %fd22, %fd32;
	mov.f64 	%fd34, 0d3F8999999999A3C4;
	fma.rn.f64 	%fd35, %fd33, %fd22, %fd34;
	mov.f64 	%fd36, 0d3FB5555555555554;
	fma.rn.f64 	%fd37, %fd35, %fd22, %fd36;
	sub.f64 	%fd38, %fd19, %fd21;
	add.f64 	%fd39, %fd38, %fd38;
	neg.f64 	%fd40, %fd21;
	fma.rn.f64 	%fd41, %fd40, %fd19, %fd39;
	mul.f64 	%fd42, %fd18, %fd41;
	mul.f64 	%fd43, %fd22, %fd37;
	fma.rn.f64 	%fd44, %fd43, %fd21, %fd42;
	xor.b32  	%r26, %r32, -2147483648;
	mov.u32 	%r27, 1127219200;
	mov.b64 	%fd45, {%r26, %r27};
	mov.u32 	%r28, -2147483648;
	mov.b64 	%fd46, {%r28, %r27};
	sub.f64 	%fd47, %fd45, %fd46;
	mov.f64 	%fd48, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd49, %fd47, %fd48, %fd21;
	neg.f64 	%fd50, %fd47;
	fma.rn.f64 	%fd51, %fd50, %fd48, %fd49;
	sub.f64 	%fd52, %fd51, %fd21;
	sub.f64 	%fd53, %fd44, %fd52;
	mov.f64 	%fd54, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd55, %fd47, %fd54, %fd53;
	add.f64 	%fd58, %fd49, %fd55;
	bra.uni 	BB31_8;

BB31_4:
	mov.f64 	%fd10, 0d7FF0000000000000;
	fma.rn.f64 	%fd11, %fd56, %fd10, %fd10;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r19}, %fd56;
	}
	mov.b32 	 %f1, %r19;
	setp.eq.f32	%p4, %f1, 0f00000000;
	selp.f64	%fd58, 0dFFF0000000000000, %fd11, %p4;

BB31_8:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f64 	[%rd9], %fd58;

BB31_9:
	ret;
}

	// .globl	matrix_floor
.visible .entry matrix_floor(
	.param .u64 matrix_floor_param_0,
	.param .u64 matrix_floor_param_1,
	.param .u32 matrix_floor_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [matrix_floor_param_0];
	ld.param.u64 	%rd2, [matrix_floor_param_1];
	ld.param.u32 	%r2, [matrix_floor_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	cvt.rmi.f64.f64	%fd2, %fd1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd2;

BB32_2:
	ret;
}

	// .globl	matrix_ceil
.visible .entry matrix_ceil(
	.param .u64 matrix_ceil_param_0,
	.param .u64 matrix_ceil_param_1,
	.param .u32 matrix_ceil_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [matrix_ceil_param_0];
	ld.param.u64 	%rd2, [matrix_ceil_param_1];
	ld.param.u32 	%r2, [matrix_ceil_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB33_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	cvt.rpi.f64.f64	%fd2, %fd1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd2;

BB33_2:
	ret;
}

	// .globl	matrix_sin
.visible .entry matrix_sin(
	.param .u64 matrix_sin_param_0,
	.param .u64 matrix_sin_param_1,
	.param .u32 matrix_sin_param_2
)
{
	.local .align 4 .b8 	__local_depot34[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<17>;


	mov.u64 	%rd16, __local_depot34;
	cvta.local.u64 	%SP, %rd16;
	ld.param.u64 	%rd3, [matrix_sin_param_0];
	ld.param.u64 	%rd4, [matrix_sin_param_1];
	ld.param.u32 	%r5, [matrix_sin_param_2];
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.u32	%p1, %r1, %r5;
	@%p1 bra 	BB34_10;

	cvta.to.global.u64 	%rd6, %rd3;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f64 	%fd38, [%rd8];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r9, %temp}, %fd38;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd38;
	}
	and.b32  	%r11, %r10, 2147483647;
	setp.eq.s32	%p2, %r11, 2146435072;
	setp.eq.s32	%p3, %r9, 0;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB34_3;
	bra.uni 	BB34_2;

BB34_2:
	mov.f64 	%fd14, 0d0000000000000000;
	mul.rn.f64 	%fd38, %fd38, %fd14;

BB34_3:
	mul.f64 	%fd15, %fd38, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r17, %fd15;
	st.local.u32 	[%rd1], %r17;
	cvt.rn.f64.s32	%fd16, %r17;
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd19, %fd17, %fd18, %fd38;
	mov.f64 	%fd20, 0d3C91A62633145C00;
	fma.rn.f64 	%fd21, %fd17, %fd20, %fd19;
	mov.f64 	%fd22, 0d397B839A252049C0;
	fma.rn.f64 	%fd39, %fd17, %fd22, %fd21;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd38;
	}
	and.b32  	%r13, %r12, 2145386496;
	setp.lt.u32	%p5, %r13, 1105199104;
	@%p5 bra 	BB34_5;

	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd38;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd39, [retval0+0];
	
	//{
	}// Callseq End 3
	ld.local.u32 	%r17, [%rd1];

BB34_5:
	and.b32  	%r14, %r17, 1;
	shl.b32 	%r15, %r14, 3;
	setp.eq.b32	%p6, %r14, 1;
	selp.f64	%fd23, 0dBDA8FF8320FD8164, 0d3DE5DB65F9785EBA, %p6;
	mul.wide.u32 	%rd10, %r15, 8;
	mov.u64 	%rd11, __cudart_sin_cos_coeffs;
	add.s64 	%rd12, %rd10, %rd11;
	ld.const.f64 	%fd24, [%rd12+8];
	mul.rn.f64 	%fd7, %fd39, %fd39;
	fma.rn.f64 	%fd25, %fd23, %fd7, %fd24;
	ld.const.f64 	%fd26, [%rd12+16];
	fma.rn.f64 	%fd27, %fd25, %fd7, %fd26;
	ld.const.f64 	%fd28, [%rd12+24];
	fma.rn.f64 	%fd29, %fd27, %fd7, %fd28;
	ld.const.f64 	%fd30, [%rd12+32];
	fma.rn.f64 	%fd31, %fd29, %fd7, %fd30;
	ld.const.f64 	%fd32, [%rd12+40];
	fma.rn.f64 	%fd33, %fd31, %fd7, %fd32;
	ld.const.f64 	%fd34, [%rd12+48];
	fma.rn.f64 	%fd8, %fd33, %fd7, %fd34;
	fma.rn.f64 	%fd40, %fd8, %fd39, %fd39;
	setp.eq.s32	%p7, %r14, 0;
	@%p7 bra 	BB34_7;

	mov.f64 	%fd35, 0d3FF0000000000000;
	fma.rn.f64 	%fd40, %fd8, %fd7, %fd35;

BB34_7:
	and.b32  	%r16, %r17, 2;
	setp.eq.s32	%p8, %r16, 0;
	@%p8 bra 	BB34_9;

	mov.f64 	%fd36, 0d0000000000000000;
	mov.f64 	%fd37, 0dBFF0000000000000;
	fma.rn.f64 	%fd40, %fd40, %fd37, %fd36;

BB34_9:
	cvta.to.global.u64 	%rd13, %rd4;
	shl.b64 	%rd14, %rd2, 3;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f64 	[%rd15], %fd40;

BB34_10:
	ret;
}

	// .globl	matrix_cos
.visible .entry matrix_cos(
	.param .u64 matrix_cos_param_0,
	.param .u64 matrix_cos_param_1,
	.param .u32 matrix_cos_param_2
)
{
	.local .align 4 .b8 	__local_depot35[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<19>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<17>;


	mov.u64 	%rd16, __local_depot35;
	cvta.local.u64 	%SP, %rd16;
	ld.param.u64 	%rd3, [matrix_cos_param_0];
	ld.param.u64 	%rd4, [matrix_cos_param_1];
	ld.param.u32 	%r6, [matrix_cos_param_2];
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.u32	%p1, %r1, %r6;
	@%p1 bra 	BB35_10;

	cvta.to.global.u64 	%rd6, %rd3;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f64 	%fd38, [%rd8];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r10, %temp}, %fd38;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r11}, %fd38;
	}
	and.b32  	%r12, %r11, 2147483647;
	setp.eq.s32	%p2, %r12, 2146435072;
	setp.eq.s32	%p3, %r10, 0;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB35_3;
	bra.uni 	BB35_2;

BB35_2:
	mov.f64 	%fd14, 0d0000000000000000;
	mul.rn.f64 	%fd38, %fd38, %fd14;

BB35_3:
	mul.f64 	%fd15, %fd38, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r18, %fd15;
	st.local.u32 	[%rd1], %r18;
	cvt.rn.f64.s32	%fd16, %r18;
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd19, %fd17, %fd18, %fd38;
	mov.f64 	%fd20, 0d3C91A62633145C00;
	fma.rn.f64 	%fd21, %fd17, %fd20, %fd19;
	mov.f64 	%fd22, 0d397B839A252049C0;
	fma.rn.f64 	%fd39, %fd17, %fd22, %fd21;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %fd38;
	}
	and.b32  	%r14, %r13, 2145386496;
	setp.lt.u32	%p5, %r14, 1105199104;
	@%p5 bra 	BB35_5;

	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd38;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd39, [retval0+0];
	
	//{
	}// Callseq End 4
	ld.local.u32 	%r18, [%rd1];

BB35_5:
	add.s32 	%r5, %r18, 1;
	and.b32  	%r15, %r5, 1;
	shl.b32 	%r16, %r15, 3;
	setp.eq.b32	%p6, %r15, 1;
	selp.f64	%fd23, 0dBDA8FF8320FD8164, 0d3DE5DB65F9785EBA, %p6;
	mul.wide.u32 	%rd10, %r16, 8;
	mov.u64 	%rd11, __cudart_sin_cos_coeffs;
	add.s64 	%rd12, %rd10, %rd11;
	ld.const.f64 	%fd24, [%rd12+8];
	mul.rn.f64 	%fd7, %fd39, %fd39;
	fma.rn.f64 	%fd25, %fd23, %fd7, %fd24;
	ld.const.f64 	%fd26, [%rd12+16];
	fma.rn.f64 	%fd27, %fd25, %fd7, %fd26;
	ld.const.f64 	%fd28, [%rd12+24];
	fma.rn.f64 	%fd29, %fd27, %fd7, %fd28;
	ld.const.f64 	%fd30, [%rd12+32];
	fma.rn.f64 	%fd31, %fd29, %fd7, %fd30;
	ld.const.f64 	%fd32, [%rd12+40];
	fma.rn.f64 	%fd33, %fd31, %fd7, %fd32;
	ld.const.f64 	%fd34, [%rd12+48];
	fma.rn.f64 	%fd8, %fd33, %fd7, %fd34;
	fma.rn.f64 	%fd40, %fd8, %fd39, %fd39;
	setp.eq.s32	%p7, %r15, 0;
	@%p7 bra 	BB35_7;

	mov.f64 	%fd35, 0d3FF0000000000000;
	fma.rn.f64 	%fd40, %fd8, %fd7, %fd35;

BB35_7:
	and.b32  	%r17, %r5, 2;
	setp.eq.s32	%p8, %r17, 0;
	@%p8 bra 	BB35_9;

	mov.f64 	%fd36, 0d0000000000000000;
	mov.f64 	%fd37, 0dBFF0000000000000;
	fma.rn.f64 	%fd40, %fd40, %fd37, %fd36;

BB35_9:
	cvta.to.global.u64 	%rd13, %rd4;
	shl.b64 	%rd14, %rd2, 3;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f64 	[%rd15], %fd40;

BB35_10:
	ret;
}

	// .globl	matrix_tan
.visible .entry matrix_tan(
	.param .u64 matrix_tan_param_0,
	.param .u64 matrix_tan_param_1,
	.param .u32 matrix_tan_param_2
)
{
	.local .align 4 .b8 	__local_depot36[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<7>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<66>;
	.reg .b64 	%rd<14>;


	mov.u64 	%rd13, __local_depot36;
	cvta.local.u64 	%SP, %rd13;
	ld.param.u64 	%rd3, [matrix_tan_param_0];
	ld.param.u64 	%rd4, [matrix_tan_param_1];
	ld.param.u32 	%r5, [matrix_tan_param_2];
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.u32	%p1, %r1, %r5;
	@%p1 bra 	BB36_8;

	cvta.to.global.u64 	%rd6, %rd3;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f64 	%fd63, [%rd8];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r9, %temp}, %fd63;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd63;
	}
	and.b32  	%r11, %r10, 2147483647;
	setp.eq.s32	%p2, %r11, 2146435072;
	setp.eq.s32	%p3, %r9, 0;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB36_3;
	bra.uni 	BB36_2;

BB36_2:
	mov.f64 	%fd11, 0d0000000000000000;
	mul.rn.f64 	%fd63, %fd63, %fd11;

BB36_3:
	mul.f64 	%fd12, %fd63, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r15, %fd12;
	st.local.u32 	[%rd1], %r15;
	cvt.rn.f64.s32	%fd13, %r15;
	neg.f64 	%fd14, %fd13;
	mov.f64 	%fd15, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd16, %fd14, %fd15, %fd63;
	mov.f64 	%fd17, 0d3C91A62633145C00;
	fma.rn.f64 	%fd18, %fd14, %fd17, %fd16;
	mov.f64 	%fd19, 0d397B839A252049C0;
	fma.rn.f64 	%fd64, %fd14, %fd19, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd63;
	}
	and.b32  	%r13, %r12, 2145386496;
	setp.lt.u32	%p5, %r13, 1105199104;
	@%p5 bra 	BB36_5;

	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd63;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd64, [retval0+0];
	
	//{
	}// Callseq End 5
	ld.local.u32 	%r15, [%rd1];

BB36_5:
	mul.f64 	%fd20, %fd64, %fd64;
	mov.f64 	%fd21, 0dBEF9757C5B27EBB1;
	mov.f64 	%fd22, 0d3EE48DAC2799BCB9;
	fma.rn.f64 	%fd23, %fd22, %fd20, %fd21;
	mov.f64 	%fd24, 0d3F0980E90FD91E04;
	fma.rn.f64 	%fd25, %fd23, %fd20, %fd24;
	mov.f64 	%fd26, 0dBEFAE2B0417D7E1D;
	fma.rn.f64 	%fd27, %fd25, %fd20, %fd26;
	mov.f64 	%fd28, 0d3F119F5341BFBA57;
	fma.rn.f64 	%fd29, %fd27, %fd20, %fd28;
	mov.f64 	%fd30, 0d3F15E791A00F6919;
	fma.rn.f64 	%fd31, %fd29, %fd20, %fd30;
	mov.f64 	%fd32, 0d3F2FF2E7FADEC73A;
	fma.rn.f64 	%fd33, %fd31, %fd20, %fd32;
	mov.f64 	%fd34, 0d3F434BC1B206DA62;
	fma.rn.f64 	%fd35, %fd33, %fd20, %fd34;
	mov.f64 	%fd36, 0d3F57DB18EF2F83F9;
	fma.rn.f64 	%fd37, %fd35, %fd20, %fd36;
	mov.f64 	%fd38, 0d3F6D6D2E7AE49FBC;
	fma.rn.f64 	%fd39, %fd37, %fd20, %fd38;
	mov.f64 	%fd40, 0d3F8226E3A816A776;
	fma.rn.f64 	%fd41, %fd39, %fd20, %fd40;
	mov.f64 	%fd42, 0d3F9664F485D25660;
	fma.rn.f64 	%fd43, %fd41, %fd20, %fd42;
	mov.f64 	%fd44, 0d3FABA1BA1BABF31D;
	fma.rn.f64 	%fd45, %fd43, %fd20, %fd44;
	mov.f64 	%fd46, 0d3FC11111111105D2;
	fma.rn.f64 	%fd47, %fd45, %fd20, %fd46;
	mov.f64 	%fd48, 0d3FD555555555555E;
	fma.rn.f64 	%fd49, %fd47, %fd20, %fd48;
	mul.f64 	%fd7, %fd20, %fd49;
	fma.rn.f64 	%fd65, %fd7, %fd64, %fd64;
	and.b32  	%r14, %r15, 1;
	setp.eq.b32	%p6, %r14, 1;
	@!%p6 bra 	BB36_7;
	bra.uni 	BB36_6;

BB36_6:
	sub.f64 	%fd52, %fd65, %fd64;
	neg.f64 	%fd53, %fd52;
	fma.rn.f64 	%fd54, %fd7, %fd64, %fd53;
	// inline asm
	rcp.approx.ftz.f64 %fd50,%fd65;
	// inline asm
	neg.f64 	%fd55, %fd65;
	mov.f64 	%fd56, 0d3FF0000000000000;
	fma.rn.f64 	%fd57, %fd55, %fd50, %fd56;
	fma.rn.f64 	%fd58, %fd57, %fd57, %fd57;
	fma.rn.f64 	%fd59, %fd58, %fd50, %fd50;
	neg.f64 	%fd60, %fd59;
	fma.rn.f64 	%fd61, %fd65, %fd60, %fd56;
	fma.rn.f64 	%fd62, %fd60, %fd54, %fd61;
	fma.rn.f64 	%fd65, %fd62, %fd60, %fd60;

BB36_7:
	cvta.to.global.u64 	%rd10, %rd4;
	shl.b64 	%rd11, %rd2, 3;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f64 	[%rd12], %fd65;

BB36_8:
	ret;
}

	// .globl	matrix_asin
.visible .entry matrix_asin(
	.param .u64 matrix_asin_param_0,
	.param .u64 matrix_asin_param_1,
	.param .u32 matrix_asin_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .f64 	%fd<83>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [matrix_asin_param_0];
	ld.param.u64 	%rd3, [matrix_asin_param_1];
	ld.param.u32 	%r3, [matrix_asin_param_2];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.u32	%p1, %r1, %r3;
	@%p1 bra 	BB37_5;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd1;
	}
	mov.b32 	 %f1, %r2;
	abs.f32 	%f2, %f1;
	setp.lt.f32	%p2, %f2, 0f3FE26666;
	@%p2 bra 	BB37_3;
	bra.uni 	BB37_2;

BB37_3:
	mul.f64 	%fd55, %fd1, %fd1;
	mov.f64 	%fd56, 0dBFB3823B180754AF;
	mov.f64 	%fd57, 0d3FB0066BDC1895E9;
	fma.rn.f64 	%fd58, %fd57, %fd55, %fd56;
	mov.f64 	%fd59, 0d3FB11E52CC2F79AE;
	fma.rn.f64 	%fd60, %fd58, %fd55, %fd59;
	mov.f64 	%fd61, 0dBF924EAF3526861B;
	fma.rn.f64 	%fd62, %fd60, %fd55, %fd61;
	mov.f64 	%fd63, 0d3F91DF02A31E6CB7;
	fma.rn.f64 	%fd64, %fd62, %fd55, %fd63;
	mov.f64 	%fd65, 0d3F847D18B0EEC6CC;
	fma.rn.f64 	%fd66, %fd64, %fd55, %fd65;
	mov.f64 	%fd67, 0d3F8D0AF961BA53B0;
	fma.rn.f64 	%fd68, %fd66, %fd55, %fd67;
	mov.f64 	%fd69, 0d3F91BF7734CF1C48;
	fma.rn.f64 	%fd70, %fd68, %fd55, %fd69;
	mov.f64 	%fd71, 0d3F96E91483144EF7;
	fma.rn.f64 	%fd72, %fd70, %fd55, %fd71;
	mov.f64 	%fd73, 0d3F9F1C6E0A4F9F81;
	fma.rn.f64 	%fd74, %fd72, %fd55, %fd73;
	mov.f64 	%fd75, 0d3FA6DB6DC27FA92B;
	fma.rn.f64 	%fd76, %fd74, %fd55, %fd75;
	mov.f64 	%fd77, 0d3FB333333320F91B;
	fma.rn.f64 	%fd78, %fd76, %fd55, %fd77;
	mov.f64 	%fd79, 0d3FC5555555555F4D;
	fma.rn.f64 	%fd80, %fd78, %fd55, %fd79;
	mul.f64 	%fd81, %fd55, %fd80;
	fma.rn.f64 	%fd82, %fd81, %fd1, %fd1;
	bra.uni 	BB37_4;

BB37_2:
	abs.f64 	%fd7, %fd1;
	mov.f64 	%fd8, 0d3FE0000000000000;
	mov.f64 	%fd9, 0dBFE0000000000000;
	fma.rn.f64 	%fd6, %fd9, %fd7, %fd8;
	// inline asm
	rsqrt.approx.ftz.f64 %fd5, %fd6;
	// inline asm
	{
	.reg .b32 %temp; 
	mov.b64 	{%r7, %temp}, %fd5;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd5;
	}
	add.s32 	%r9, %r8, -1048576;
	mov.b64 	%fd10, {%r7, %r9};
	mul.f64 	%fd11, %fd6, %fd5;
	neg.f64 	%fd12, %fd11;
	fma.rn.f64 	%fd13, %fd11, %fd12, %fd6;
	fma.rn.f64 	%fd14, %fd13, %fd10, %fd11;
	neg.f64 	%fd15, %fd14;
	mov.f64 	%fd16, 0d3FF0000000000000;
	fma.rn.f64 	%fd17, %fd5, %fd15, %fd16;
	fma.rn.f64 	%fd18, %fd17, %fd10, %fd10;
	fma.rn.f64 	%fd19, %fd14, %fd15, %fd6;
	fma.rn.f64 	%fd20, %fd19, %fd18, %fd14;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd6;
	}
	setp.lt.s32	%p3, %r10, 0;
	selp.f64	%fd21, 0dFFF8000000000000, %fd20, %p3;
	setp.ne.f64	%p4, %fd6, 0d0000000000000000;
	selp.f64	%fd22, %fd21, %fd6, %p4;
	mov.f64 	%fd23, 0dBFB3823B180754AF;
	mov.f64 	%fd24, 0d3FB0066BDC1895E9;
	fma.rn.f64 	%fd25, %fd24, %fd6, %fd23;
	mov.f64 	%fd26, 0d3FB11E52CC2F79AE;
	fma.rn.f64 	%fd27, %fd25, %fd6, %fd26;
	mov.f64 	%fd28, 0dBF924EAF3526861B;
	fma.rn.f64 	%fd29, %fd27, %fd6, %fd28;
	mov.f64 	%fd30, 0d3F91DF02A31E6CB7;
	fma.rn.f64 	%fd31, %fd29, %fd6, %fd30;
	mov.f64 	%fd32, 0d3F847D18B0EEC6CC;
	fma.rn.f64 	%fd33, %fd31, %fd6, %fd32;
	mov.f64 	%fd34, 0d3F8D0AF961BA53B0;
	fma.rn.f64 	%fd35, %fd33, %fd6, %fd34;
	mov.f64 	%fd36, 0d3F91BF7734CF1C48;
	fma.rn.f64 	%fd37, %fd35, %fd6, %fd36;
	mov.f64 	%fd38, 0d3F96E91483144EF7;
	fma.rn.f64 	%fd39, %fd37, %fd6, %fd38;
	mov.f64 	%fd40, 0d3F9F1C6E0A4F9F81;
	fma.rn.f64 	%fd41, %fd39, %fd6, %fd40;
	mov.f64 	%fd42, 0d3FA6DB6DC27FA92B;
	fma.rn.f64 	%fd43, %fd41, %fd6, %fd42;
	mov.f64 	%fd44, 0d3FB333333320F91B;
	fma.rn.f64 	%fd45, %fd43, %fd6, %fd44;
	mov.f64 	%fd46, 0d3FC5555555555F4D;
	fma.rn.f64 	%fd47, %fd45, %fd6, %fd46;
	mul.f64 	%fd48, %fd6, %fd47;
	mul.f64 	%fd49, %fd22, 0dC000000000000000;
	mov.f64 	%fd50, 0d3C91A62633145C07;
	fma.rn.f64 	%fd51, %fd49, %fd48, %fd50;
	add.f64 	%fd52, %fd49, 0d3FE921FB54442D18;
	add.f64 	%fd53, %fd52, %fd51;
	add.f64 	%fd54, %fd53, 0d3FE921FB54442D18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r11, %temp}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd54;
	}
	and.b32  	%r13, %r2, -2147483648;
	or.b32  	%r14, %r12, %r13;
	mov.b64 	%fd82, {%r11, %r14};

BB37_4:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f64 	[%rd9], %fd82;

BB37_5:
	ret;
}

	// .globl	matrix_acos
.visible .entry matrix_acos(
	.param .u64 matrix_acos_param_0,
	.param .u64 matrix_acos_param_1,
	.param .u32 matrix_acos_param_2
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<17>;
	.reg .f64 	%fd<95>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [matrix_acos_param_0];
	ld.param.u64 	%rd3, [matrix_acos_param_1];
	ld.param.u32 	%r4, [matrix_acos_param_2];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.u32	%p1, %r1, %r4;
	@%p1 bra 	BB38_14;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd16, [%rd6];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd16;
	}
	abs.f64 	%fd1, %fd16;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd1;
	}
	setp.lt.s32	%p2, %r8, 1071801958;
	@%p2 bra 	BB38_9;
	bra.uni 	BB38_2;

BB38_9:
	mul.f64 	%fd62, %fd1, %fd1;
	mov.f64 	%fd63, 0dBFB3823B180754AF;
	mov.f64 	%fd64, 0d3FB0066BDC1895E9;
	fma.rn.f64 	%fd65, %fd64, %fd62, %fd63;
	mov.f64 	%fd66, 0d3FB11E52CC2F79AE;
	fma.rn.f64 	%fd67, %fd65, %fd62, %fd66;
	mov.f64 	%fd68, 0dBF924EAF3526861B;
	fma.rn.f64 	%fd69, %fd67, %fd62, %fd68;
	mov.f64 	%fd70, 0d3F91DF02A31E6CB7;
	fma.rn.f64 	%fd71, %fd69, %fd62, %fd70;
	mov.f64 	%fd72, 0d3F847D18B0EEC6CC;
	fma.rn.f64 	%fd73, %fd71, %fd62, %fd72;
	mov.f64 	%fd74, 0d3F8D0AF961BA53B0;
	fma.rn.f64 	%fd75, %fd73, %fd62, %fd74;
	mov.f64 	%fd76, 0d3F91BF7734CF1C48;
	fma.rn.f64 	%fd77, %fd75, %fd62, %fd76;
	mov.f64 	%fd78, 0d3F96E91483144EF7;
	fma.rn.f64 	%fd79, %fd77, %fd62, %fd78;
	mov.f64 	%fd80, 0d3F9F1C6E0A4F9F81;
	fma.rn.f64 	%fd81, %fd79, %fd62, %fd80;
	mov.f64 	%fd82, 0d3FA6DB6DC27FA92B;
	fma.rn.f64 	%fd83, %fd81, %fd62, %fd82;
	mov.f64 	%fd84, 0d3FB333333320F91B;
	fma.rn.f64 	%fd85, %fd83, %fd62, %fd84;
	mov.f64 	%fd86, 0d3FC5555555555F4D;
	fma.rn.f64 	%fd87, %fd85, %fd62, %fd86;
	mul.f64 	%fd88, %fd62, %fd87;
	fma.rn.f64 	%fd10, %fd88, %fd1, %fd1;
	setp.lt.s32	%p6, %r2, 0;
	@%p6 bra 	BB38_11;

	mov.f64 	%fd89, 0dBC91A62633145C07;
	add.rn.f64 	%fd90, %fd10, %fd89;
	neg.f64 	%fd93, %fd90;
	bra.uni 	BB38_12;

BB38_2:
	mov.f64 	%fd19, 0d3FF0000000000000;
	sub.f64 	%fd2, %fd19, %fd1;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r9, %temp}, %fd2;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd2;
	}
	add.s32 	%r10, %r3, -1048576;
	mov.b64 	%fd18, {%r9, %r10};
	// inline asm
	rsqrt.approx.ftz.f64 %fd17, %fd18;
	// inline asm
	{
	.reg .b32 %temp; 
	mov.b64 	{%r11, %temp}, %fd17;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd17;
	}
	add.s32 	%r13, %r12, -1048576;
	mov.b64 	%fd20, {%r11, %r13};
	mul.f64 	%fd21, %fd18, %fd17;
	neg.f64 	%fd22, %fd21;
	fma.rn.f64 	%fd23, %fd21, %fd22, %fd18;
	fma.rn.f64 	%fd24, %fd23, %fd20, %fd21;
	neg.f64 	%fd25, %fd24;
	fma.rn.f64 	%fd26, %fd17, %fd25, %fd19;
	fma.rn.f64 	%fd27, %fd26, %fd20, %fd20;
	fma.rn.f64 	%fd28, %fd24, %fd25, %fd18;
	fma.rn.f64 	%fd3, %fd28, %fd27, %fd24;
	setp.lt.s32	%p3, %r3, 1;
	@%p3 bra 	BB38_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd3;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd3;
	}
	add.s32 	%r16, %r15, 1048576;
	mov.b64 	%fd29, {%r14, %r16};
	mov.f64 	%fd30, 0dBEBAC2FE66FAAC4B;
	mov.f64 	%fd31, 0d3EC715B371155F70;
	fma.rn.f64 	%fd32, %fd31, %fd2, %fd30;
	mov.f64 	%fd33, 0d3ED9A9B88EFCD9B8;
	fma.rn.f64 	%fd34, %fd32, %fd2, %fd33;
	mov.f64 	%fd35, 0d3EDD0F40A8A0C4C3;
	fma.rn.f64 	%fd36, %fd34, %fd2, %fd35;
	mov.f64 	%fd37, 0d3EF46D4CFA9E0E1F;
	fma.rn.f64 	%fd38, %fd36, %fd2, %fd37;
	mov.f64 	%fd39, 0d3F079C168D1E2422;
	fma.rn.f64 	%fd40, %fd38, %fd2, %fd39;
	mov.f64 	%fd41, 0d3F1C9A88C3BCA540;
	fma.rn.f64 	%fd42, %fd40, %fd2, %fd41;
	mov.f64 	%fd43, 0d3F31C4E64BD476DF;
	fma.rn.f64 	%fd44, %fd42, %fd2, %fd43;
	mov.f64 	%fd45, 0d3F46E8BA60009C8F;
	fma.rn.f64 	%fd46, %fd44, %fd2, %fd45;
	mov.f64 	%fd47, 0d3F5F1C71C62B05A2;
	fma.rn.f64 	%fd48, %fd46, %fd2, %fd47;
	mov.f64 	%fd49, 0d3F76DB6DB6DC9F2C;
	fma.rn.f64 	%fd50, %fd48, %fd2, %fd49;
	mov.f64 	%fd51, 0d3F9333333333329C;
	fma.rn.f64 	%fd52, %fd50, %fd2, %fd51;
	mov.f64 	%fd53, 0d3FB5555555555555;
	fma.rn.f64 	%fd54, %fd52, %fd2, %fd53;
	mul.f64 	%fd55, %fd2, %fd54;
	fma.rn.f64 	%fd94, %fd55, %fd29, %fd29;
	bra.uni 	BB38_5;

BB38_11:
	mov.f64 	%fd91, 0d3C91A62633145C07;
	add.rn.f64 	%fd93, %fd10, %fd91;

BB38_12:
	mov.f64 	%fd92, 0d3FF921FB54442D18;
	add.rn.f64 	%fd94, %fd92, %fd93;
	bra.uni 	BB38_13;

BB38_4:
	mov.f64 	%fd56, 0d0000000000000000;
	mul.rn.f64 	%fd94, %fd1, %fd56;

BB38_5:
	setp.gt.s32	%p4, %r3, -1;
	@%p4 bra 	BB38_7;

	mov.f64 	%fd57, 0d7FF0000000000000;
	mul.rn.f64 	%fd94, %fd94, %fd57;

BB38_7:
	setp.gt.s32	%p5, %r2, -1;
	@%p5 bra 	BB38_13;

	mov.f64 	%fd58, 0dBCA1A62633145C07;
	add.rn.f64 	%fd59, %fd94, %fd58;
	neg.f64 	%fd60, %fd59;
	mov.f64 	%fd61, 0d400921FB54442D18;
	add.rn.f64 	%fd94, %fd61, %fd60;

BB38_13:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f64 	[%rd9], %fd94;

BB38_14:
	ret;
}

	// .globl	matrix_atan
.visible .entry matrix_atan(
	.param .u64 matrix_atan_param_0,
	.param .u64 matrix_atan_param_1,
	.param .u32 matrix_atan_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<57>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [matrix_atan_param_0];
	ld.param.u64 	%rd3, [matrix_atan_param_1];
	ld.param.u32 	%r2, [matrix_atan_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB39_4;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	abs.f64 	%fd2, %fd1;
	setp.leu.f64	%p2, %fd2, 0d3FF0000000000000;
	mov.f64 	%fd56, %fd2;
	@%p2 bra 	BB39_3;

	// inline asm
	rcp.approx.ftz.f64 %fd5,%fd2;
	// inline asm
	neg.f64 	%fd7, %fd2;
	mov.f64 	%fd8, 0d3FF0000000000000;
	fma.rn.f64 	%fd9, %fd7, %fd5, %fd8;
	fma.rn.f64 	%fd10, %fd9, %fd9, %fd9;
	fma.rn.f64 	%fd11, %fd10, %fd5, %fd5;
	setp.eq.f64	%p3, %fd2, 0d7FF0000000000000;
	selp.f64	%fd3, 0d0000000000000000, %fd11, %p3;
	mov.f64 	%fd56, %fd3;

BB39_3:
	mov.f64 	%fd4, %fd56;
	cvta.to.global.u64 	%rd7, %rd3;
	mul.f64 	%fd12, %fd4, %fd4;
	mov.f64 	%fd13, 0d3F2D3B63DBB65B49;
	mov.f64 	%fd14, 0dBEF53E1D2A25FF7E;
	fma.rn.f64 	%fd15, %fd14, %fd12, %fd13;
	mov.f64 	%fd16, 0dBF5312788DDE082E;
	fma.rn.f64 	%fd17, %fd15, %fd12, %fd16;
	mov.f64 	%fd18, 0d3F6F9690C8249315;
	fma.rn.f64 	%fd19, %fd17, %fd12, %fd18;
	mov.f64 	%fd20, 0dBF82CF5AABC7CF0D;
	fma.rn.f64 	%fd21, %fd19, %fd12, %fd20;
	mov.f64 	%fd22, 0d3F9162B0B2A3BFDE;
	fma.rn.f64 	%fd23, %fd21, %fd12, %fd22;
	mov.f64 	%fd24, 0dBF9A7256FEB6FC6B;
	fma.rn.f64 	%fd25, %fd23, %fd12, %fd24;
	mov.f64 	%fd26, 0d3FA171560CE4A489;
	fma.rn.f64 	%fd27, %fd25, %fd12, %fd26;
	mov.f64 	%fd28, 0dBFA4F44D841450E4;
	fma.rn.f64 	%fd29, %fd27, %fd12, %fd28;
	mov.f64 	%fd30, 0d3FA7EE3D3F36BB95;
	fma.rn.f64 	%fd31, %fd29, %fd12, %fd30;
	mov.f64 	%fd32, 0dBFAAD32AE04A9FD1;
	fma.rn.f64 	%fd33, %fd31, %fd12, %fd32;
	mov.f64 	%fd34, 0d3FAE17813D66954F;
	fma.rn.f64 	%fd35, %fd33, %fd12, %fd34;
	mov.f64 	%fd36, 0dBFB11089CA9A5BCD;
	fma.rn.f64 	%fd37, %fd35, %fd12, %fd36;
	mov.f64 	%fd38, 0d3FB3B12B2DB51738;
	fma.rn.f64 	%fd39, %fd37, %fd12, %fd38;
	mov.f64 	%fd40, 0dBFB745D022F8DC5C;
	fma.rn.f64 	%fd41, %fd39, %fd12, %fd40;
	mov.f64 	%fd42, 0d3FBC71C709DFE927;
	fma.rn.f64 	%fd43, %fd41, %fd12, %fd42;
	mov.f64 	%fd44, 0dBFC2492491FA1744;
	fma.rn.f64 	%fd45, %fd43, %fd12, %fd44;
	mov.f64 	%fd46, 0d3FC99999999840D2;
	fma.rn.f64 	%fd47, %fd45, %fd12, %fd46;
	mov.f64 	%fd48, 0dBFD555555555544C;
	fma.rn.f64 	%fd49, %fd47, %fd12, %fd48;
	mul.f64 	%fd50, %fd12, %fd49;
	fma.rn.f64 	%fd51, %fd50, %fd4, %fd4;
	mov.f64 	%fd52, 0d3FF921FB54442D18;
	sub.f64 	%fd53, %fd52, %fd51;
	setp.gt.f64	%p4, %fd2, 0d3FF0000000000000;
	selp.f64	%fd54, %fd53, %fd51, %p4;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r7}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd1;
	}
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b64 	%fd55, {%r6, %r10};
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f64 	[%rd9], %fd55;

BB39_4:
	ret;
}

	// .globl	matrix_sign
.visible .entry matrix_sign(
	.param .u64 matrix_sign_param_0,
	.param .u64 matrix_sign_param_1,
	.param .u32 matrix_sign_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<12>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [matrix_sign_param_0];
	ld.param.u64 	%rd3, [matrix_sign_param_1];
	ld.param.u32 	%r2, [matrix_sign_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32	%p1, %r1, %r2;
	@%p1 bra 	BB40_4;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	setp.eq.f64	%p2, %fd1, 0d0000000000000000;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd1, %rd7, %rd5;
	@%p2 bra 	BB40_3;
	bra.uni 	BB40_2;

BB40_3:
	mov.u64 	%rd8, 0;
	st.global.u64 	[%rd1], %rd8;
	bra.uni 	BB40_4;

BB40_2:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r6}, %fd1;
	}
	and.b32  	%r7, %r6, -2147483648;
	mov.f64 	%fd2, 0d3FF0000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd2;
	}
	and.b32  	%r9, %r8, 2147483647;
	or.b32  	%r10, %r9, %r7;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r11, %temp}, %fd2;
	}
	mov.b64 	%fd3, {%r11, %r10};
	st.global.f64 	[%rd1], %fd3;

BB40_4:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot41[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%rd100, __local_depot41;
	cvta.local.u64 	%SP, %rd100;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd38;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB41_13;

	add.s32 	%r16, %r4, -1024;
	shr.u32 	%r17, %r16, 6;
	mov.u32 	%r18, 16;
	sub.s32 	%r5, %r18, %r17;
	mov.u32 	%r19, 19;
	sub.s32 	%r20, %r19, %r17;
	mov.u32 	%r21, 18;
	min.s32 	%r6, %r21, %r20;
	setp.gt.s32	%p2, %r5, %r6;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB41_4;

	mov.b64 	 %rd41, %fd4;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd3, %rd42, -9223372036854775808;
	add.s32 	%r7, %r5, -1;
	mov.u64 	%rd92, %rd1;
	bfe.u32 	%r22, %r1, 20, 11;
	add.s32 	%r23, %r22, -1024;
	shr.u32 	%r24, %r23, 6;
	neg.s32 	%r25, %r24;
	mul.wide.s32 	%rd43, %r25, 8;
	mov.u64 	%rd44, __cudart_i2opi_d;
	add.s64 	%rd45, %rd43, %rd44;
	add.s64 	%rd90, %rd45, 120;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r7;

BB41_3:
	.pragma "nounroll";
	mov.u32 	%r8, %r39;
	mov.u64 	%rd7, %rd91;
	ld.const.u64 	%rd48, [%rd90];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd48;    
	mov.b64         {blo,bhi}, %rd3;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd46, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd92], %rd46;
	add.s32 	%r9, %r8, 1;
	sub.s32 	%r26, %r9, %r7;
	mul.wide.s32 	%rd51, %r26, 8;
	add.s64 	%rd92, %rd1, %rd51;
	add.s64 	%rd13, %rd7, 8;
	mov.u64 	%rd93, %rd13;
	add.s64 	%rd90, %rd90, 8;
	setp.lt.s32	%p3, %r9, %r6;
	mov.u64 	%rd91, %rd13;
	mov.u32 	%r39, %r9;
	@%p3 bra 	BB41_3;

BB41_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r10, %r3, 63;
	setp.eq.s32	%p4, %r10, 0;
	@%p4 bra 	BB41_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r10;
	shl.b64 	%rd52, %rd96, %r10;
	shr.u64 	%rd53, %rd95, %r28;
	or.b64  	%rd96, %rd52, %rd53;
	shl.b64 	%rd54, %rd95, %r10;
	ld.local.u64 	%rd55, [%rd1+8];
	shr.u64 	%rd56, %rd55, %r28;
	or.b64  	%rd95, %rd56, %rd54;

BB41_6:
	cvta.to.local.u64 	%rd57, %rd37;
	shr.u64 	%rd58, %rd96, 62;
	cvt.u32.u64	%r29, %rd58;
	shr.u64 	%rd59, %rd95, 62;
	shl.b64 	%rd60, %rd96, 2;
	or.b64  	%rd98, %rd60, %rd59;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd61, %rd96, 61;
	cvt.u32.u64	%r30, %rd61;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.ne.s32	%p5, %r40, 0;
	selp.b32	%r34, %r33, %r32, %p5;
	st.local.u32 	[%rd57], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB41_8;

	mov.u64 	%rd65, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd65;
	mov.b64         {a2,a3}, %rd65;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB41_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB41_10;

	shl.b64 	%rd68, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd69, %rd97, %r36;
	or.b64  	%rd98, %rd69, %rd68;

BB41_10:
	mov.u64 	%rd73, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd73;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd70, {r0,r1};     
	mov.b64         %rd99, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd99, 1;
	@%p8 bra 	BB41_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd70;
	mov.b64         {a2,a3}, %rd99;
	mov.b64         {b0,b1}, %rd70;
	mov.b64         {b2,b3}, %rd99;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd74, {r0,r1};
	mov.b64         %rd99, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB41_12:
	cvt.u64.u32	%rd80, %r40;
	shl.b64 	%rd81, %rd80, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd82, %r38;
	shl.b64 	%rd83, %rd82, 52;
	add.s64 	%rd84, %rd99, 1;
	shr.u64 	%rd85, %rd84, 10;
	add.s64 	%rd86, %rd85, 1;
	shr.u64 	%rd87, %rd86, 1;
	add.s64 	%rd88, %rd87, %rd83;
	or.b64  	%rd89, %rd88, %rd81;
	mov.b64 	 %fd4, %rd89;

BB41_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<52>;
	.reg .f64 	%fd<134>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	ld.param.f64 	%fd13, [__internal_accurate_pow_param_1];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r49}, %fd12;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r48, %temp}, %fd12;
	}
	shr.u32 	%r50, %r49, 20;
	setp.ne.s32	%p1, %r50, 0;
	@%p1 bra 	BB42_2;

	mul.f64 	%fd14, %fd12, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r49}, %fd14;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r48, %temp}, %fd14;
	}
	shr.u32 	%r16, %r49, 20;
	add.s32 	%r50, %r16, -54;

BB42_2:
	add.s32 	%r51, %r50, -1023;
	and.b32  	%r17, %r49, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd132, {%r48, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB42_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd132;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd132;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd132, {%r19, %r21};
	add.s32 	%r51, %r50, -1022;

BB42_4:
	add.f64 	%fd16, %fd132, 0d3FF0000000000000;
	// inline asm
	rcp.approx.ftz.f64 %fd15,%fd16;
	// inline asm
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF0000000000000;
	fma.rn.f64 	%fd19, %fd17, %fd15, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd19, %fd19;
	fma.rn.f64 	%fd21, %fd20, %fd15, %fd15;
	add.f64 	%fd22, %fd132, 0dBFF0000000000000;
	mul.f64 	%fd23, %fd22, %fd21;
	fma.rn.f64 	%fd24, %fd22, %fd21, %fd23;
	mul.f64 	%fd25, %fd24, %fd24;
	mov.f64 	%fd26, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd27, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F6249249242B910;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F89999999999DFB;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	sub.f64 	%fd39, %fd22, %fd24;
	add.f64 	%fd40, %fd39, %fd39;
	neg.f64 	%fd41, %fd24;
	fma.rn.f64 	%fd42, %fd41, %fd22, %fd40;
	mul.f64 	%fd43, %fd21, %fd42;
	fma.rn.f64 	%fd44, %fd25, %fd38, 0d3FB5555555555555;
	mov.f64 	%fd45, 0d3FB5555555555555;
	sub.f64 	%fd46, %fd45, %fd44;
	fma.rn.f64 	%fd47, %fd25, %fd38, %fd46;
	add.f64 	%fd48, %fd47, 0d0000000000000000;
	add.f64 	%fd49, %fd48, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd50, %fd44, %fd49;
	sub.f64 	%fd51, %fd44, %fd50;
	add.f64 	%fd52, %fd49, %fd51;
	mul.rn.f64 	%fd53, %fd24, %fd24;
	neg.f64 	%fd54, %fd53;
	fma.rn.f64 	%fd55, %fd24, %fd24, %fd54;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd43;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd43;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd56, {%r22, %r24};
	fma.rn.f64 	%fd57, %fd24, %fd56, %fd55;
	mul.rn.f64 	%fd58, %fd53, %fd24;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd53, %fd24, %fd59;
	fma.rn.f64 	%fd61, %fd53, %fd43, %fd60;
	fma.rn.f64 	%fd62, %fd57, %fd24, %fd61;
	mul.rn.f64 	%fd63, %fd50, %fd58;
	neg.f64 	%fd64, %fd63;
	fma.rn.f64 	%fd65, %fd50, %fd58, %fd64;
	fma.rn.f64 	%fd66, %fd50, %fd62, %fd65;
	fma.rn.f64 	%fd67, %fd52, %fd58, %fd66;
	add.f64 	%fd68, %fd63, %fd67;
	sub.f64 	%fd69, %fd63, %fd68;
	add.f64 	%fd70, %fd67, %fd69;
	add.f64 	%fd71, %fd24, %fd68;
	sub.f64 	%fd72, %fd24, %fd71;
	add.f64 	%fd73, %fd68, %fd72;
	add.f64 	%fd74, %fd70, %fd73;
	add.f64 	%fd75, %fd43, %fd74;
	add.f64 	%fd76, %fd71, %fd75;
	sub.f64 	%fd77, %fd71, %fd76;
	add.f64 	%fd78, %fd75, %fd77;
	xor.b32  	%r25, %r51, -2147483648;
	mov.u32 	%r26, 1127219200;
	mov.b64 	%fd79, {%r25, %r26};
	mov.u32 	%r27, -2147483648;
	mov.b64 	%fd80, {%r27, %r26};
	sub.f64 	%fd81, %fd79, %fd80;
	mov.f64 	%fd82, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd83, %fd81, %fd82, %fd76;
	neg.f64 	%fd84, %fd81;
	fma.rn.f64 	%fd85, %fd84, %fd82, %fd83;
	sub.f64 	%fd86, %fd85, %fd76;
	sub.f64 	%fd87, %fd78, %fd86;
	mov.f64 	%fd88, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd89, %fd81, %fd88, %fd87;
	add.f64 	%fd90, %fd83, %fd89;
	sub.f64 	%fd91, %fd83, %fd90;
	add.f64 	%fd92, %fd89, %fd91;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd13;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd13;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd90, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd90, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd92, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd18;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd133, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB42_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64	%fd133, 0d0000000000000000, %fd129, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB42_7;

	shr.u32 	%r36, %r13, 31;
	add.s32 	%r37, %r13, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r13, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd133, %fd130, %fd131;

BB42_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r45}, %fd133;
	}
	and.b32  	%r46, %r45, 2147483647;
	setp.ne.s32	%p7, %r46, 2146435072;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r47, %temp}, %fd133;
	}
	setp.ne.s32	%p8, %r47, 0;
	or.pred  	%p9, %p8, %p7;
	@!%p9 bra 	BB42_9;
	bra.uni 	BB42_8;

BB42_8:
	fma.rn.f64 	%fd133, %fd133, %fd5, %fd133;

BB42_9:
	st.param.f64	[func_retval0+0], %fd133;
	ret;
}


