#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Arguments
# 1st arg: X (one column time series)
# 2nd arg: max_func_invoc
# 3rd arg: p (non-seasonal AR order)
# 4th arg: d (non-seasonal differencing order)
# 5th arg: q (non-seasonal MA order)
# 6th arg: P (seasonal AR order)
# 7th arg: D (seasonal differencing order)
# 8th arg: Q (seasonal MA order)
# 9th arg: s (period in terms of number of time-steps)
# 10th arg: 0/1 (1 means include.mean)
# 11th arg: 0 to use CG solver, 1 to use Jacobi's method
# 12th arg: file name to store learnt parameters

#changing to additive sar since R's arima seems to do that

def arima_css(w:matrix[float], X:matrix[float], pIn: int, P: int, qIn: int, Q:int, s:int, useJacobi: int) -> (obj: float):
    b = dot(X[,1:ncol(X)], w)
    
    R = Rand(rows=nrow(X), cols=nrow(X), min=0, max=0)
    for(i7 in 1:qIn):
        ma_ind_ns = P+pIn+i7
        err_ind_ns = i7
        ones_ns = Rand(rows=nrow(R)-err_ind_ns, cols=1, min=1, max=1)
        d_ns = ones_ns * scalar(w[ma_ind_ns-1,0])
        R[err_ind_ns:nrow(R),0:ncol(R)-err_ind_ns] = R[err_ind_ns:nrow(R),0:ncol(R)-err_ind_ns] + diag(d_ns)
    for(i8 in 1:Q):
        ma_ind_s = P+pIn+qIn+i8
        err_ind_s = s*i8
        ones_s = Rand(rows=nrow(R)-err_ind_s, cols=1, min=1, max=1)
        d_s = ones_s * scalar(w[ma_ind_s-1,0])
        R[err_ind_s:nrow(R),0:ncol(R)-err_ind_s] = R[err_ind_s:nrow(R),0:ncol(R)-err_ind_s] + diag(d_s)
    
    #checking for strict diagonal dominance
    #required for jacobi's method
    
    max_iter = 100
    tol = 0.01
    
    y_hat = Rand(rows=nrow(X), cols=1, min=0, max=0)
    iter = 0
    
    if(useJacobi == 1):
        check = sum(rowSums(abs(R)) >= 1)
        if(check > 0):
            print("R is not diagonal dominant. Suggest switching to an exact solver.")
        diff = tol+1.0
        while(iter < max_iter & diff > tol):
            y_hat_new = b - dot(R, y_hat)
            diff = sum((y_hat_new-y_hat)*(y_hat_new-y_hat))
            y_hat = y_hat_new
            iter = iter + 1
    else:
        ones = full(1, rows=nrow(X), cols=1)
        A = R + diag(ones)
        transpose_A = transpose(A)
        Z = dot(transpose_A, A)
        y = dot(transpose_A, b)
        r = -y
        p = -r
        norm_r2 = sum(r*r)
        continue = 1
        if(norm_r2 == 0):
            continue = 0
        while(iter < max_iter & continue == 1):
            q = dot(Z, p)
            transpose_p = transpose(p)
            alpha = norm_r2 / scalar(dot(transpose_p, q))
            y_hat = y_hat + alpha * p
            old_norm_r2 = norm_r2
            r = r + alpha * q
            norm_r2 = sum(r * r)
            if(norm_r2 < tol):
                continue = 0
            beta = norm_r2 / old_norm_r2
            p = -r + beta * p
            iter = iter + 1    
    errs = X[,0] - y_hat
    obj = sum(errs*errs)
# end arima_css function

#input col of time series data
X = load($1)

max_func_invoc = $2

#non-seasonal order
p = $3
d = $4
q = $5

#seasonal order
P = $6
D = $7
Q = $8

#length of the season
s = $9

include_mean = $10

useJacobi = $11

num_rows = nrow(X)

if(num_rows <= d):
    print("non-seasonal differencing order should be larger than length of the time-series")

Y = X
for(i in 1:d):
    n1 = nrow(Y)+0.0
    Y = Y[1:n1,] - Y[0:n1-1,]

num_rows = nrow(Y)+0.0
if(num_rows <= s*D):
    print("seasonal differencing order should be larger than number of observations divided by length of season")

for(i in 1:D):
    n1 = nrow(Y)+0.0
    Y = Y[s:n1,] - Y[0:n1-s,]

n = nrow(Y)

max_ar_col = P+p
max_ma_col = Q+q
if(max_ar_col > max_ma_col):
    max_arma_col = max_ar_col
else:
    max_arma_col = max_ma_col

mu = 0
if(include_mean == 1):
    mu = sum(Y)/nrow(Y)
    Y = Y - mu

totcols = 1+p+P+Q+q #target col (X), p-P cols, q-Q cols  

Z = Rand(rows=n, cols=totcols, min=0, max=0)
Z[,0] = Y #target col

parfor(i1 in 1:p, check=0):
    Z[i1:n,i1] = Y[0:n-i1,]

parfor(i2 in 1:P, check=0):
    Z[s*i2:n,p+i2] = Y[0:n-s*i2,]

parfor(i5 in 1:q, check=0):
    Z[i5:n,P+p+i5] = Y[0:n-i5,]

parfor(i6 in 1:Q, check=0):
    Z[s*i6:n,P+p+q+i6] = Y[0:n-s*i6,]


one = Rand(rows=1, cols=1, min=1, max=1)

simplex = Rand(rows=totcols-1, cols=totcols, min=0, max=0)
for(i in 2:ncol(simplex)):
    simplex[i-2,i-1] = 0.1

num_func_invoc = 0

objvals = Rand(rows=1, cols=ncol(simplex), min=0, max=0)
parfor(i3 in 1:ncol(simplex), check=0):
    arima_css_obj_val = arima_css(simplex[,i3-1], Z, p, P, q, Q, s, useJacobi)
    objvals[0,i3-1] = arima_css_obj_val

num_func_invoc = num_func_invoc + ncol(simplex)

tol = 1.5 * (10**-8) * scalar(objvals[0,0])

continue = 1
while(continue == 1 & num_func_invoc <= max_func_invoc):
    best_index = 1
    worst_index = 1
    for(i in 2:ncol(objvals)):
        this = scalar(objvals[0,i-1])
        that = scalar(objvals[0,best_index-1])
        if(that > this):
            best_index = i
        that = scalar(objvals[0,worst_index-1])
        if(that < this):
            worst_index = i
    
    best_obj_val = scalar(objvals[0,best_index-1])
    worst_obj_val = scalar(objvals[0,worst_index-1])
    if(worst_obj_val <= best_obj_val + tol):
        continue = 0
    
    print("#Function calls::" + num_func_invoc + " OBJ: " + best_obj_val)
    
    c = (rowSums(simplex) - simplex[,worst_index-1])/(nrow(simplex))
    
    x_r = 2*c - simplex[,worst_index-1]
    obj_x_r = arima_css(x_r, Z, p, P, q, Q, s, useJacobi)
    num_func_invoc = num_func_invoc + 1
    
    if(obj_x_r < best_obj_val):
        x_e = 2*x_r - c
        obj_x_e = arima_css(x_e, Z, p, P, q, Q, s, useJacobi)
        num_func_invoc = num_func_invoc + 1
        
        if(obj_x_r <= obj_x_e):
            simplex[,worst_index-1] = x_r
            objvals[0,worst_index-1] = obj_x_r
        else:
            simplex[,worst_index-1] = x_e
            objvals[0,worst_index-1] = obj_x_e
    else:
        if(obj_x_r < worst_obj_val):
            simplex[,worst_index-1] = x_r
            objvals[0,worst_index-1] = obj_x_r
        
        x_c_in = (simplex[,worst_index-1] + c)/2
        obj_x_c_in = arima_css(x_c_in, Z, p, P, q, Q, s, useJacobi)
        num_func_invoc = num_func_invoc + 1
        
        if(obj_x_c_in < scalar(objvals[0,worst_index-1])):
            simplex[,worst_index-1] = x_c_in
            objvals[0,worst_index-1] = obj_x_c_in
        else:
            if(obj_x_r >= worst_obj_val):
                best_point = simplex[,best_index-1]
                parfor(i4 in 1:ncol(simplex), check=0):
                    if(i4 != best_index):
                        simplex[,i4-1] = (simplex[,i4-1] + best_point)/2
                        tmp = arima_css(simplex[,i4-1], Z, p, P, q, Q, s, useJacobi)
                        objvals[0,i4-1] = tmp*one
                num_func_invoc = num_func_invoc + ncol(simplex) - 1

best_point = simplex[,best_index-1]
if(include_mean == 1):
    tmp2 = Rand(rows=totcols, cols=1, min=0, max=0)
    tmp2[0:nrow(best_point),0] = best_point
    tmp2[nrow(tmp2)-1,0] = mu
    best_point = tmp2

save(best_point, $12, format="text")
